{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Clinics Components\\\\Clinic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport ClinicForm from \"./ClinicForm\";\nimport ClinicsTable from \"./ClinicsTable\";\nimport { getAllClinics } from \"./Clinics Functions/ClinicsFunctions\";\nimport api from \"../../Re-usable/Api Url/apiURL\";\nimport { webApiURL as webApiUrl } from \"../../../Constants/URLConstants\";\n\nconst Clinic = props => {\n  _s();\n\n  const clinicId = props.match !== undefined ? props.match.params.id : null;\n  const [update, setUpdate] = useState(true);\n  const [clinics, setClinics] = useState([]);\n  const [clinic, setClinic] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    console.log(\"--clinic update\");\n  });\n\n  function refresh() {\n    setUpdate(!update);\n  }\n\n  const getClinic = async () => {\n    try {\n      const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\n      setClinic(res.data); // console.log(\"clinic response \", res.data)\n    } catch (e) {}\n  };\n\n  const fetchData = async () => {\n    console.log(\"--clinic table,,,,, effect\");\n    setClinics(await getAllClinics());\n\n    if (clinicId !== null) {\n      //if the id is found in the url\n      await getClinic();\n      setLoading(true);\n      console.log('clinic data from the clinic', clinics);\n    }\n  };\n\n  useLayoutEffect(() => {\n    fetchData();\n  }, [update]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clinics-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(ClinicForm, {\n      setUpdate: refresh,\n      clinic: clinicId === undefined ? undefined : clinic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ClinicsTable, {\n      clinics: clinics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Clinic, \"Jl94xqKOCuaSZVMsq/CK/FX0IGk=\");\n\n_c = Clinic;\nexport default Clinic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Clinic\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Clinics Components/Clinic.js"],"names":["React","useEffect","useLayoutEffect","useState","ClinicForm","ClinicsTable","getAllClinics","api","webApiURL","webApiUrl","Clinic","props","clinicId","match","undefined","params","id","update","setUpdate","clinics","setClinics","clinic","setClinic","loading","setLoading","console","log","refresh","getClinic","res","get","data","e","fetchData"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,eAA1B,EAA2CC,QAA3C,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,aAAR,QAA4B,sCAA5B;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,SAAQC,SAAS,IAAIC,SAArB,QAAqC,iCAArC;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AAGtB,QAAMC,QAAQ,GAAGD,KAAK,CAACE,KAAN,KAAgBC,SAAhB,GAA4BH,KAAK,CAACE,KAAN,CAAYE,MAAZ,CAAmBC,EAA/C,GAAoD,IAArE;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,GAFQ,CAAT;;AAIA,WAASC,OAAT,GAAmB;AACfT,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH;;AAED,QAAMW,SAAS,GAAG,YAAY;AAC1B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMtB,GAAG,CAACuB,GAAJ,CAAQrB,SAAS,CAACU,OAAV,CAAkBS,SAAlB,GAA8BhB,QAAtC,CAAlB;AACAU,MAAAA,SAAS,CAACO,GAAG,CAACE,IAAL,CAAT,CAFA,CAKA;AACH,KAND,CAME,OAAOC,CAAP,EAAU,CAEX;AACJ,GAVD;;AAWA,QAAMC,SAAS,GAAG,YAAY;AAE1BR,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAN,IAAAA,UAAU,CAAC,MAAMd,aAAa,EAApB,CAAV;;AAGA,QAAIM,QAAQ,KAAK,IAAjB,EAAuB;AAAC;AACpB,YAAMgB,SAAS,EAAf;AAEAJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AAGJC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CP,OAA3C;AAEH;AAAC,GAdF;;AAeAjB,EAAAA,eAAe,CAAC,MAAM;AAGlB+B,IAAAA,SAAS;AAEZ,GALc,EAKZ,CAAChB,MAAD,CALY,CAAf;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BAEI,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEU,OAAvB;AAAgC,MAAA,MAAM,EAAEf,QAAQ,KAAGE,SAAX,GAAqBA,SAArB,GAAgCO;AAAxE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA5DD;;GAAMT,M;;KAAAA,M;AA8DN,eAAeA,MAAf","sourcesContent":["import React, {useEffect, useLayoutEffect, useState} from 'react';\r\nimport ClinicForm from \"./ClinicForm\";\r\nimport ClinicsTable from \"./ClinicsTable\";\r\nimport {getAllClinics} from \"./Clinics Functions/ClinicsFunctions\";\r\nimport api from \"../../Re-usable/Api Url/apiURL\";\r\nimport {webApiURL as webApiUrl} from \"../../../Constants/URLConstants\";\r\n\r\nconst Clinic = (props) => {\r\n\r\n\r\n    const clinicId = props.match !== undefined ? props.match.params.id : null\r\n    const [update, setUpdate] = useState(true)\r\n    const [clinics, setClinics] = useState([]);\r\n    const [clinic, setClinic] = useState([]);\r\n    const [loading, setLoading] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"--clinic update\")\r\n    })\r\n\r\n    function refresh() {\r\n        setUpdate(!update)\r\n    }\r\n\r\n    const getClinic = async () => {\r\n        try {\r\n            const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\r\n            setClinic(res.data)\r\n\r\n\r\n            // console.log(\"clinic response \", res.data)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const fetchData = async () => {\r\n\r\n        console.log(\"--clinic table,,,,, effect\")\r\n        setClinics(await getAllClinics());\r\n\r\n\r\n        if (clinicId !== null) {//if the id is found in the url\r\n            await getClinic()\r\n\r\n            setLoading(true)\r\n\r\n\r\n        console.log('clinic data from the clinic', clinics)\r\n\r\n    }}\r\n    useLayoutEffect(() => {\r\n\r\n\r\n        fetchData()\r\n\r\n    }, [update])\r\n\r\n\r\n    return (\r\n        <div className=\"clinics-wrapper\">\r\n\r\n            <ClinicForm setUpdate={refresh} clinic={clinicId===undefined?undefined: clinic}/>\r\n            <ClinicsTable clinics={clinics}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clinic;"]},"metadata":{},"sourceType":"module"}