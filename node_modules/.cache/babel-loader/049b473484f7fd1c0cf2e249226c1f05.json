{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Waiting Queue\\\\WaitingQueueForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\nimport { getFullName } from \"../../../Common Functions/PersonFunctions\";\nimport { postPatientToQueueService } from \"./Waiting Queue Logic/WaitingQueueServices\";\nimport { waitingQueueURLs } from \"../../../Constants/URLConstants\";\n\nfunction WaitingQueueForm({\n  patient,\n  clinics,\n  employees\n}) {\n  _s();\n\n  let history = useHistory();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = async data => {\n    const res = await postPatientToQueueService({\n      clinic: data.clinicName,\n      patient: {\n        id: patient.id\n      },\n      patientFullName: getFullName(patient.person.personName),\n      employee: {\n        id: data.employee\n      }\n    });\n\n    if (res.status === 201) {\n      history.push(waitingQueueURLs.waitingQueueList);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"waiting-queue-form-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center text-info\",\n      children: \"Add patient to waiting queue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-secondary\",\n      children: [\"Patient ID : \", patient.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Patient Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: getFullName(patient.person.personName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"clinicName\",\n          children: \"Select clinic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-control\",\n          id: \"clinicName\",\n          name: \"clinicName\",\n          ref: register,\n          children: clinics.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.clinicName,\n            children: item.clinicName\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"employee\",\n          children: \"Select Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-control\",\n          id: \"employee\",\n          name: \"employee\",\n          ref: register,\n          children: employees.map(item => {\n            const name = item.person.personName;\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.id,\n              children: name.firstName + \" \" + name.parentName + \" \" + name.grandName + \" \" + name.familyName\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WaitingQueueForm, \"JD+u/tmpMP7FrgJRf8rIWt3WwiA=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = WaitingQueueForm;\nexport default WaitingQueueForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"WaitingQueueForm\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Waiting Queue/WaitingQueueForm.js"],"names":["React","useLayoutEffect","useForm","useHistory","getFullName","postPatientToQueueService","waitingQueueURLs","WaitingQueueForm","patient","clinics","employees","history","register","handleSubmit","errors","onSubmit","data","res","clinic","clinicName","id","patientFullName","person","personName","employee","status","push","waitingQueueList","map","item","name","firstName","parentName","grandName","familyName"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useHistory} from \"react-router\";\r\nimport {getFullName} from \"../../../Common Functions/PersonFunctions\";\r\nimport {postPatientToQueueService} from \"./Waiting Queue Logic/WaitingQueueServices\";\r\nimport {waitingQueueURLs} from \"../../../Constants/URLConstants\";\r\n\r\nfunction WaitingQueueForm({patient, clinics, employees}) {\r\n    let history = useHistory();\r\n    const {register, handleSubmit, errors} = useForm();\r\n\r\n    const onSubmit = async (data) => {\r\n       const res= await postPatientToQueueService({\r\n            clinic: data.clinicName,\r\n            patient: {id: patient.id},\r\n            patientFullName: getFullName(patient.person.personName),\r\n            employee: {id: data.employee}\r\n        });\r\n\r\n       if(res.status===201){\r\n           history.push(waitingQueueURLs.waitingQueueList)\r\n\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div className=\"waiting-queue-form-wrapper\">\r\n\r\n            <h3 className=\"text-center text-info\">Add patient to waiting queue</h3>\r\n            <p className=\"text-secondary\">\r\n                Patient ID : {patient.id}\r\n            </p>\r\n            <div className=\"d-inline\">\r\n                <h3>Patient Name</h3>\r\n                <h4>{getFullName(patient.person.personName)}</h4>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"clinicName\">Select clinic</label>\r\n                    <select className=\"form-control\" id=\"clinicName\" name=\"clinicName\" ref={register}>\r\n                        {clinics.map(item => (\r\n                            <option key={item.id} value={item.clinicName}>\r\n                                {item.clinicName}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"employee\">Select Employee</label>\r\n                    <select className=\"form-control\" id=\"employee\" name=\"employee\" ref={register}>\r\n                        {employees.map(item => {\r\n                                const name = item.person.personName;\r\n                                return <option key={item.id} value={item.id}>\r\n                                    {name.firstName + \" \" + name.parentName + \" \" + name.grandName + \" \" + name.familyName}\r\n                                </option>\r\n                            }\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                <input type=\"submit\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WaitingQueueForm;"]},"metadata":{},"sourceType":"module"}