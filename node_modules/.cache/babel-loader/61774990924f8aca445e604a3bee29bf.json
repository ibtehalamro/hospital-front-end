{"ast":null,"code":"import api from '../../../Re-usable/Api Url/apiURL';\nimport { frontToBackPatient } from \"../../../../Common Functions/PersonFunctions\";\nimport axios from 'axios';\nimport { webApiURL } from \"../../../../Constants/URLConstants\";\nexport const getPatientService = async (setPatient, patientId) => {\n  try {\n    const result = await api.get(webApiURL.patient.getPatient + `/${patientId}`);\n    console.log(\"m\", result.data);\n    setPatient(result.data);\n  } catch (e) {}\n};\nexport const getPatientInformationService = async patientId => {\n  const requestOne = api.get(webApiURL.patient.getPatient + `/${patientId}`);\n  const requestTwo = api.get(webApiURL.invoice.getPatientInvoices + `/${patientId}`);\n  const res = await axios.all([requestOne, requestTwo]);\n  const newRes = axios.spread((...responses) => {\n    const responseOne = responses[0];\n    const responseTwo = responses[1];\n    console.log(\"patient\", responseOne.data);\n    console.log(\"invoices\", responseTwo.data);\n    let data = {\n      patient: responseOne.data,\n      invoices: responseTwo.data\n    };\n    console.log(\"res\", data);\n  });\n  console.log(\"newRes\", res);\n  return res; //     await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\n  //         const responseOne = responses[0]\n  //         const responseTwo = responses[1]\n  //         console.log(\"patient\", responseOne.data)\n  //         console.log(\"invoices\", responseTwo.data)\n  // let data={patient: responseOne.data,invoices:responseTwo.data}\n  //         console.log(\"res\", data)\n  //\n  //         return responses\n  //     })).catch(e => {\n  //         console.log(e)\n  //     })\n};\nexport const postPatienttest = async patient => {\n  try {\n    const result = await api.post(webApiURL.patient.postPatient, patient);\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const postPatientService = async (patient, id, setServerError, setAdded, e) => {\n  patient = frontToBackPatient(patient);\n\n  if (id !== null) {\n    patient = { ...patient,\n      id: id\n    };\n  }\n\n  return await api.post(webApiURL.patient.postPatient, patient);\n};\nexport const submitPatient = patient => {\n  postPatientService(patient).then(value => console.log('patient submitted'));\n};\nexport const getPatientsListService = async (pageNumber, itemsPerPage) => {\n  try {\n    return await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`);\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const checkPatientDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findPatientsForm = async (name, setPatientsList, setServerError) => {\n  //method to get the patients list based on the person name if there is any error it is stored in the --> serverError\n  console.log(name);\n\n  try {\n    const res = await api.get(webApiURL.patient.findPatientByName + name);\n    setPatientsList(res.data);\n  } catch (e) {\n    if (e.response) setServerError(e.response.data);\n    setPatientsList([]);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Patient/Patient Logic/PatientServices.js"],"names":["api","frontToBackPatient","axios","webApiURL","getPatientService","setPatient","patientId","result","get","patient","getPatient","console","log","data","e","getPatientInformationService","requestOne","requestTwo","invoice","getPatientInvoices","res","all","newRes","spread","responses","responseOne","responseTwo","invoices","postPatienttest","post","postPatient","response","postPatientService","id","setServerError","setAdded","submitPatient","then","value","getPatientsListService","pageNumber","itemsPerPage","checkPatientDept","dueAmount","findPatientsForm","name","setPatientsList","findPatientByName"],"mappings":"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","sourcesContent":["import api from '../../../Re-usable/Api Url/apiURL'\r\nimport {frontToBackPatient} from \"../../../../Common Functions/PersonFunctions\";\r\nimport axios from 'axios';\r\nimport {webApiURL} from \"../../../../Constants/URLConstants\";\r\n\r\nexport const getPatientService = async (setPatient, patientId) => {\r\n\r\n    try {\r\n        const result = await api.get(webApiURL.patient.getPatient + `/${patientId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setPatient(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getPatientInformationService = async (patientId) => {\r\n\r\n    const requestOne = api.get(webApiURL.patient.getPatient + `/${patientId}`);\r\n    const requestTwo = api.get(webApiURL.invoice.getPatientInvoices + `/${patientId}`);\r\n\r\n    const res=   await axios.all([requestOne, requestTwo]);\r\n    const newRes=axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n        const responseTwo = responses[1]\r\n        console.log(\"patient\", responseOne.data)\r\n        console.log(\"invoices\", responseTwo.data)\r\n        let data={patient: responseOne.data,invoices:responseTwo.data}\r\n        console.log(\"res\", data)\r\n\r\n    })\r\n    console.log(\"newRes\",res)\r\nreturn res\r\n//     await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\r\n//         const responseOne = responses[0]\r\n//         const responseTwo = responses[1]\r\n//         console.log(\"patient\", responseOne.data)\r\n//         console.log(\"invoices\", responseTwo.data)\r\n// let data={patient: responseOne.data,invoices:responseTwo.data}\r\n//         console.log(\"res\", data)\r\n//\r\n//         return responses\r\n//     })).catch(e => {\r\n//         console.log(e)\r\n//     })\r\n}\r\nexport const postPatienttest = async (patient ) => {\r\n\r\n\r\n\r\n    try {\r\n        const result = await api.post(webApiURL.patient.postPatient, patient);\r\n\r\n\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const postPatientService = async (patient, id, setServerError, setAdded, e) => {\r\n\r\n    patient = frontToBackPatient(patient);\r\n    if (id !== null) {\r\n        patient = {...patient, id: id}\r\n    }\r\n    return await api.post(webApiURL.patient.postPatient, patient)\r\n\r\n\r\n}\r\n\r\nexport const submitPatient = (patient) => {\r\n\r\n\r\n    postPatientService(patient).then(value => console.log('patient submitted'));\r\n}\r\n\r\n\r\nexport const getPatientsListService = async ( pageNumber, itemsPerPage) => {\r\n    try {\r\n        return await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkPatientDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findPatientsForm = async (name, setPatientsList, setServerError) => {//method to get the patients list based on the person name if there is any error it is stored in the --> serverError\r\n    console.log(name)\r\n    try {\r\n        const res = await api.get(webApiURL.patient.findPatientByName + name)\r\n        setPatientsList(res.data)\r\n    } catch (e) {\r\n        if (e.response)\r\n            setServerError(e.response.data)\r\n        setPatientsList([])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}