{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Clinics Components\\\\Clinic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from 'react';\nimport ClinicForm from \"./ClinicForm\";\nimport ClinicsTable from \"./ClinicsTable\";\nimport { getAllClinicsService } from \"./Clinics Functions/ClinicsServices\";\nimport api from \"../../Re-usable/Api Url/apiURL\";\nimport { webApiURL as webApiUrl } from \"../../../Constants/URLConstants\";\n\nconst Clinic = props => {\n  _s();\n\n  let clinicId = props.match !== undefined ? props.match.params.id : undefined;\n  const [update, setUpdate] = useState(true);\n  const [clinics, setClinics] = useState([]);\n  const [clinic, setClinic] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getClinic = async () => {\n    try {\n      const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\n      setClinic(res.data);\n    } catch (e) {}\n  };\n\n  const getAllClinics = async () => {\n    setClinics(await getAllClinicsService());\n\n    if (clinicId !== undefined) {\n      //if the id is found in the url\n      await getClinic();\n    }\n  };\n\n  useLayoutEffect(() => {\n    let mounted = true;\n    if (mounted) getAllClinics();\n    return () => {\n      mounted = false;\n    };\n  }, [update, props.match]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clinics-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(ClinicForm, {\n      clinic: clinicId === undefined ? undefined : clinic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ClinicsTable, {\n      clinics: clinics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Clinic, \"ZWD+PO/df7VNStTRy516NR+0TaQ=\");\n\n_c = Clinic;\nexport default Clinic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Clinic\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Clinics Components/Clinic.js"],"names":["React","useLayoutEffect","useState","ClinicForm","ClinicsTable","getAllClinicsService","api","webApiURL","webApiUrl","Clinic","props","clinicId","match","undefined","params","id","update","setUpdate","clinics","setClinics","clinic","setClinic","loading","setLoading","getClinic","res","get","data","e","getAllClinics","mounted"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,eAAf,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,oBAAR,QAAmC,qCAAnC;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,SAAQC,SAAS,IAAIC,SAArB,QAAqC,iCAArC;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACtB,MAAIC,QAAQ,GAAGD,KAAK,CAACE,KAAN,KAAgBC,SAAhB,GAA4BH,KAAK,CAACE,KAAN,CAAYE,MAAZ,CAAmBC,EAA/C,GAAoDF,SAAnE;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMsB,SAAS,GAAG,YAAY;AAC1B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMnB,GAAG,CAACoB,GAAJ,CAAQlB,SAAS,CAACU,OAAV,CAAkBM,SAAlB,GAA8Bb,QAAtC,CAAlB;AACAU,MAAAA,SAAS,CAACI,GAAG,CAACE,IAAL,CAAT;AACH,KAHD,CAGE,OAAOC,CAAP,EAAU,CAEX;AACJ,GAPD;;AAQA,QAAMC,aAAa,GAAG,YAAY;AAG9BV,IAAAA,UAAU,CAAC,MAAMd,oBAAoB,EAA3B,CAAV;;AAEA,QAAIM,QAAQ,KAAKE,SAAjB,EAA4B;AAAC;AACzB,YAAMW,SAAS,EAAf;AACH;AAEJ,GATD;;AAWAvB,EAAAA,eAAe,CAAC,MAAM;AAC1B,QAAI6B,OAAO,GAAC,IAAZ;AAEQ,QAAGA,OAAH,EACAD,aAAa;AAEb,WAAO,MAAI;AAACC,MAAAA,OAAO,GAAC,KAAR;AAAc,KAA1B;AACH,GAPc,EAOZ,CAACd,MAAD,EAASN,KAAK,CAACE,KAAf,CAPY,CAAf;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BAGQ,QAAC,UAAD;AAAY,MAAA,MAAM,EAAED,QAAQ,KAAKE,SAAb,GAAyBA,SAAzB,GAAqCO;AAAzD;AAAA;AAAA;AAAA;AAAA,YAHR,eAIQ,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA,YAJR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA7CD;;GAAMT,M;;KAAAA,M;AA+CN,eAAeA,MAAf","sourcesContent":["import React, {useLayoutEffect, useState} from 'react';\r\nimport ClinicForm from \"./ClinicForm\";\r\nimport ClinicsTable from \"./ClinicsTable\";\r\nimport {getAllClinicsService} from \"./Clinics Functions/ClinicsServices\";\r\nimport api from \"../../Re-usable/Api Url/apiURL\";\r\nimport {webApiURL as webApiUrl} from \"../../../Constants/URLConstants\";\r\n\r\nconst Clinic = (props) => {\r\n    let clinicId = props.match !== undefined ? props.match.params.id : undefined\r\n    const [update, setUpdate] = useState(true)\r\n    const [clinics, setClinics] = useState([]);\r\n    const [clinic, setClinic] = useState([]);\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const getClinic = async () => {\r\n        try {\r\n            const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\r\n            setClinic(res.data)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const getAllClinics = async () => {\r\n\r\n\r\n        setClinics(await getAllClinicsService());\r\n\r\n        if (clinicId !== undefined) {//if the id is found in the url\r\n            await getClinic()\r\n        }\r\n\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\nlet mounted=true\r\n\r\n        if(mounted)\r\n        getAllClinics()\r\n\r\n        return ()=>{mounted=false}\r\n    }, [update, props.match])\r\n\r\n\r\n    return (\r\n        <div className=\"clinics-wrapper\">\r\n\r\n\r\n                <ClinicForm clinic={clinicId === undefined ? undefined : clinic}/>\r\n                <ClinicsTable clinics={clinics}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clinic;"]},"metadata":{},"sourceType":"module"}