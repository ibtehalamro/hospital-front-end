{"ast":null,"code":"import api from '../../../Re-usable/Api Url/apiURL';\nimport { frontToBackPatient } from \"../../../../Common Functions/PersonFunctions\";\nimport axios from 'axios';\nimport { webApiURL } from \"../../../../Constants/URLConstants\";\nexport const getPatientService = async (setPatient, patientId) => {\n  try {\n    const result = await api.get(webApiURL.patient.getPatient + `/${patientId}`);\n    console.log(\"m\", result.data);\n    setPatient(result.data);\n  } catch (e) {}\n};\nexport const getPatientInformationService = async patientId => {\n  const requestOne = api.get(webApiURL.patient.getPatient + `/${patientId}`);\n  const requestTwo = api.get(webApiURL.invoice.getPatientInvoices + `/${patientId}`);\n  let data = {};\n  await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\n    data = {\n      patient: responses[0].data,\n      invoices: responses[1].data\n    };\n  })).catch(e => {\n    console.log(e);\n  });\n  return data;\n};\nexport const postPatientService = async (patient, id, setServerError, setAdded, e) => {\n  patient = frontToBackPatient(patient);\n\n  if (id !== null) {\n    patient = { ...patient,\n      id: id\n    };\n  }\n\n  return await api.post(webApiURL.patient.postPatient, patient);\n};\nexport const submitPatient = patient => {\n  postPatientService(patient).then(value => console.log('patient submitted'));\n};\nexport const getPatientsListService = async (pageNumber, itemsPerPage) => {\n  try {\n    const response = await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`);\n    console.log(\"response from service\", response);\n    return response;\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const checkPatientDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findPatientsForm = async (name, setPatientsList, setServerError) => {\n  //method to get the patients list based on the person name if there is any error it is stored in the --> serverError\n  console.log(name);\n\n  try {\n    const res = await api.get(webApiURL.patient.findPatientByName + name);\n    setPatientsList(res.data);\n  } catch (e) {\n    if (e.response) setServerError(e.response.data);\n    setPatientsList([]);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Patient/Patient Logic/PatientServices.js"],"names":["api","frontToBackPatient","axios","webApiURL","getPatientService","setPatient","patientId","result","get","patient","getPatient","console","log","data","e","getPatientInformationService","requestOne","requestTwo","invoice","getPatientInvoices","all","then","spread","responses","invoices","catch","postPatientService","id","setServerError","setAdded","post","postPatient","submitPatient","value","getPatientsListService","pageNumber","itemsPerPage","response","checkPatientDept","dueAmount","findPatientsForm","name","setPatientsList","res","findPatientByName"],"mappings":"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","sourcesContent":["import api from '../../../Re-usable/Api Url/apiURL'\r\nimport {frontToBackPatient} from \"../../../../Common Functions/PersonFunctions\";\r\nimport axios from 'axios';\r\nimport {webApiURL} from \"../../../../Constants/URLConstants\";\r\n\r\nexport const getPatientService = async (setPatient, patientId) => {\r\n\r\n    try {\r\n        const result = await api.get(webApiURL.patient.getPatient + `/${patientId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setPatient(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getPatientInformationService = async (patientId) => {\r\n\r\n    const requestOne = api.get(webApiURL.patient.getPatient + `/${patientId}`);\r\n    const requestTwo = api.get(webApiURL.invoice.getPatientInvoices + `/${patientId}`);\r\n\r\n    let data={}\r\n  await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\r\n\r\n      data = {patient:responses[0].data,invoices:responses[1].data}\r\n\r\n  })).catch(e => {\r\n      console.log(e)\r\n  })\r\n\r\n    return data\r\n\r\n}\r\n\r\n\r\nexport const postPatientService = async (patient, id, setServerError, setAdded, e) => {\r\n\r\n    patient = frontToBackPatient(patient);\r\n    if (id !== null) {\r\n        patient = {...patient, id: id}\r\n    }\r\n    return await api.post(webApiURL.patient.postPatient, patient)\r\n\r\n\r\n}\r\n\r\nexport const submitPatient = (patient) => {\r\n\r\n\r\n    postPatientService(patient).then(value => console.log('patient submitted'));\r\n}\r\n\r\n\r\nexport const getPatientsListService = async (pageNumber, itemsPerPage) => {\r\n    try {\r\n        const response=await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        console.log(\"response from service\",response)\r\n        return response\r\n\r\n    } catch (e) {\r\n\r\n        console.log(e.response.data)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkPatientDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findPatientsForm = async (name, setPatientsList, setServerError) => {//method to get the patients list based on the person name if there is any error it is stored in the --> serverError\r\n    console.log(name)\r\n    try {\r\n        const res = await api.get(webApiURL.patient.findPatientByName + name)\r\n        setPatientsList(res.data)\r\n    } catch (e) {\r\n        if (e.response)\r\n            setServerError(e.response.data)\r\n        setPatientsList([])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}