{"ast":null,"code":"import { frontToBackEmployee } from \"../../../../Common Functions/PersonFunctions\";\nimport { webApiURL } from \"../../../../Constants/URLConstants\";\nimport axios from 'axios';\nimport api from '../../../Re-usable/Api Url/apiURL';\nexport const getEmployee = async (setEmployee, employeeId) => {\n  try {\n    const result = await api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\n    console.log(\"m\", result.data);\n    setEmployee(result.data);\n  } catch (e) {}\n};\nexport const getEmployeeInformation = async (setEmployee, setInvoices, employeeId) => {\n  const requestOne = api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\n  const requestTwo = api.get(webApiURL.invoice.getPatientsTreatedByDoctor + `/${employeeId}`);\n  await axios.all([requestOne]).then(axios.spread((...responses) => {\n    const responseOne = responses[0];\n    console.log(\"employee\", responseOne.data);\n    setEmployee(responseOne.data);\n  })).catch(e => {\n    console.log(e);\n  });\n};\nexport const postEmployee = async (employee, id, setServerError, setAdded, e) => {\n  setServerError(\"\");\n  setAdded(false);\n  employee = frontToBackEmployee(employee);\n\n  if (id !== null) {\n    employee = { ...employee,\n      id: id\n    };\n  }\n\n  try {\n    const result = await api.post(webApiURL.employee.postEmployee, employee);\n\n    if (result.status === 201) {\n      setAdded(true);\n      setTimeout(function () {\n        setAdded(false);\n      }, 5000);\n    }\n\n    e.target.reset();\n  } catch (e) {\n    console.log(e.response.data); //TODO handle validation errors\n\n    setServerError(e.response.data);\n  }\n};\nexport const submitEmployee = employee => {\n  postEmployee(employee).then(value => console.log('employee submitted'));\n};\nexport const getEmployeesList = async (pageNumber, itemsPerPage) => {\n  console.log(\"employee list \");\n\n  try {\n    const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`);\n    return res.data;\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const checkEmployeeDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findEmployeesForm = async (name, setEmployeesList, setServerError) => {\n  //method to get the employees list based on the person name if there is any error it is stored in the --> serverError\n  console.log(name);\n\n  try {\n    const res = await api.get(webApiURL.employee.findEmployeeByName + name);\n    setEmployeesList(res.data);\n  } catch (e) {\n    if (e.response) setServerError(e.response.data);\n    setEmployeesList([]);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Employee/Employee Logic/EmployeeFunctions.js"],"names":["frontToBackEmployee","webApiURL","axios","api","getEmployee","setEmployee","employeeId","result","get","employee","console","log","data","e","getEmployeeInformation","setInvoices","requestOne","requestTwo","invoice","getPatientsTreatedByDoctor","all","then","spread","responses","responseOne","catch","postEmployee","id","setServerError","setAdded","post","status","setTimeout","target","reset","response","submitEmployee","value","getEmployeesList","pageNumber","itemsPerPage","res","checkEmployeeDept","dueAmount","findEmployeesForm","name","setEmployeesList","findEmployeeByName"],"mappings":"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","sourcesContent":["import {frontToBackEmployee} from \"../../../../Common Functions/PersonFunctions\";\r\nimport {webApiURL} from \"../../../../Constants/URLConstants\";\r\nimport axios from 'axios';\r\nimport api from '../../../Re-usable/Api Url/apiURL'\r\n\r\nexport const getEmployee = async (setEmployee, employeeId) => {\r\n\r\n    try {\r\n        const result = await api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setEmployee(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getEmployeeInformation = async (setEmployee, setInvoices, employeeId) => {\r\n\r\n\r\n    const requestOne = api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\r\n    const requestTwo = api.get(webApiURL.invoice.getPatientsTreatedByDoctor + `/${employeeId}`);\r\n\r\n    await axios.all([requestOne]).then(axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n        console.log(\"employee\", responseOne.data)\r\n        setEmployee(responseOne.data)\r\n    })).catch(e => {\r\n        console.log(e)\r\n    })\r\n}\r\n\r\n\r\nexport const postEmployee = async (employee, id, setServerError, setAdded, e) => {\r\n\r\n    setServerError(\"\");\r\n    setAdded(false)\r\n\r\n    employee = frontToBackEmployee(employee);\r\n    if (id !== null) {\r\n        employee = {...employee, id: id}\r\n    }\r\n    try {\r\n        const result = await api.post(webApiURL.employee.postEmployee, employee);\r\n\r\n\r\n        if (result.status === 201) {\r\n            setAdded(true)\r\n            setTimeout(function () {\r\n                setAdded(false)\r\n            }, 5000);\r\n        }\r\n\r\n        e.target.reset();\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n        //TODO handle validation errors\r\n        setServerError(e.response.data);\r\n    }\r\n\r\n}\r\n\r\nexport const submitEmployee = (employee) => {\r\n\r\n\r\n    postEmployee(employee).then(value => console.log('employee submitted'));\r\n}\r\n\r\n\r\nexport const getEmployeesList = async (pageNumber, itemsPerPage) => {\r\n    console.log(\"employee list \")\r\n    try {\r\n        const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        return res.data\r\n\r\n    } catch (e) {\r\n        console.log(e.response)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkEmployeeDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findEmployeesForm = async (name, setEmployeesList, setServerError) => {//method to get the employees list based on the person name if there is any error it is stored in the --> serverError\r\n    console.log(name)\r\n    try {\r\n        const res = await api.get(webApiURL.employee.findEmployeeByName + name)\r\n        setEmployeesList(res.data)\r\n    } catch (e) {\r\n        if (e.response)\r\n            setServerError(e.response.data)\r\n        setEmployeesList([])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}