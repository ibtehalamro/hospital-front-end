{"ast":null,"code":"import { frontToBackEmployee } from \"../../../../Common Functions/PersonFunctions\";\nimport { webApiURL } from \"../../../../Constants/URLConstants\";\nimport axios from 'axios';\nimport api from '../../../Re-usable/Api Url/apiURL';\nexport const getEmployee = async (setEmployee, employeeId) => {\n  try {\n    const result = await api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\n    console.log(\"m\", result.data);\n    setEmployee(result.data);\n  } catch (e) {}\n};\nexport const getEmployeeInformationService = async (setEmployee, setInvoices, employeeId) => {\n  const requestOne = api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\n  const requestTwo = api.get(webApiURL.invoice.getPatientsTreatedByDoctor + `${employeeId}`);\n  let data;\n  await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\n    const responseOne = responses[0];\n    const responseTwo = responses[1];\n    data = responses[0];\n    console.log(\"employee\", responseOne.data);\n    console.log(\"responseTwo\", responseTwo.data);\n    setEmployee(responseOne.data);\n    setInvoices(responseTwo.data);\n  })).catch(e => {\n    console.log(e);\n  });\n  console.log(\"data   \", data);\n};\nexport const postEmployeeService = async (employee, id) => {\n  employee = frontToBackEmployee(employee);\n\n  if (id !== null) {\n    employee = { ...employee,\n      id: id\n    };\n  }\n\n  try {\n    const res = await api.post(webApiURL.employee.postEmployee, employee);\n    return res;\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const getEmployeesListService = async (pageNumber, itemsPerPage) => {\n  console.log(\"employee list \");\n\n  try {\n    const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`);\n    return res.data;\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const checkEmployeeDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findEmployeeService = async name => {\n  //method to get the employees list based on the person name\n  try {\n    return await api.get(webApiURL.employee.findEmployeeByName + name);\n  } catch (e) {}\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Employee/Employee Logic/EmployeeServices.js"],"names":["frontToBackEmployee","webApiURL","axios","api","getEmployee","setEmployee","employeeId","result","get","employee","console","log","data","e","getEmployeeInformationService","setInvoices","requestOne","requestTwo","invoice","getPatientsTreatedByDoctor","all","then","spread","responses","responseOne","responseTwo","catch","postEmployeeService","id","res","post","postEmployee","response","getEmployeesListService","pageNumber","itemsPerPage","checkEmployeeDept","dueAmount","findEmployeeService","name","findEmployeeByName"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,8CAAlC;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAOC,WAAP,EAAoBC,UAApB,KAAmC;AAE1D,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMJ,GAAG,CAACK,GAAJ,CAAQP,SAAS,CAACQ,QAAV,CAAmBL,WAAnB,GAAkC,IAAGE,UAAW,EAAxD,CAArB;AAEAI,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBJ,MAAM,CAACK,IAAxB;AACAP,IAAAA,WAAW,CAACE,MAAM,CAACK,IAAR,CAAX;AACH,GALD,CAKE,OAAOC,CAAP,EAAU,CAEX;AAGJ,CAZM;AAeP,OAAO,MAAMC,6BAA6B,GAAG,OAAOT,WAAP,EAAoBU,WAApB,EAAiCT,UAAjC,KAAgD;AAGzF,QAAMU,UAAU,GAAGb,GAAG,CAACK,GAAJ,CAAQP,SAAS,CAACQ,QAAV,CAAmBL,WAAnB,GAAkC,IAAGE,UAAW,EAAxD,CAAnB;AACA,QAAMW,UAAU,GAAGd,GAAG,CAACK,GAAJ,CAAQP,SAAS,CAACiB,OAAV,CAAkBC,0BAAlB,GAAgD,GAAEb,UAAW,EAArE,CAAnB;AACA,MAAIM,IAAJ;AACF,QAAMV,KAAK,CAACkB,GAAN,CAAU,CAACJ,UAAD,EAAYC,UAAZ,CAAV,EAAmCI,IAAnC,CAAwCnB,KAAK,CAACoB,MAAN,CAAa,CAAC,GAAGC,SAAJ,KAAkB;AACvE,UAAMC,WAAW,GAAGD,SAAS,CAAC,CAAD,CAA7B;AACA,UAAME,WAAW,GAAGF,SAAS,CAAC,CAAD,CAA7B;AACFX,IAAAA,IAAI,GAAGW,SAAS,CAAC,CAAD,CAAhB;AACEb,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBa,WAAW,CAACZ,IAApC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bc,WAAW,CAACb,IAAvC;AACAP,IAAAA,WAAW,CAACmB,WAAW,CAACZ,IAAb,CAAX;AACAG,IAAAA,WAAW,CAACU,WAAW,CAACb,IAAb,CAAX;AACH,GAR2C,CAAxC,EAQAc,KARA,CAQMb,CAAC,IAAI;AACXH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH,GAVG,CAAN;AAWEH,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,IAAvB;AACH,CAlBM;AAqBP,OAAO,MAAMe,mBAAmB,GAAG,OAAOlB,QAAP,EAAiBmB,EAAjB,KAAwB;AAEvDnB,EAAAA,QAAQ,GAAGT,mBAAmB,CAACS,QAAD,CAA9B;;AACA,MAAImB,EAAE,KAAK,IAAX,EAAiB;AACbnB,IAAAA,QAAQ,GAAG,EAAC,GAAGA,QAAJ;AAAcmB,MAAAA,EAAE,EAAEA;AAAlB,KAAX;AACH;;AACD,MAAI;AACA,UAAMC,GAAG,GAAG,MAAM1B,GAAG,CAAC2B,IAAJ,CAAS7B,SAAS,CAACQ,QAAV,CAAmBsB,YAA5B,EAA0CtB,QAA1C,CAAlB;AAED,WAAOoB,GAAP;AACF,GAJD,CAIE,OAAOhB,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACmB,QAAF,CAAWpB,IAAvB;AACH;AACJ,CAbM;AAgBP,OAAO,MAAMqB,uBAAuB,GAAG,OAAOC,UAAP,EAAmBC,YAAnB,KAAoC;AACvEzB,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,MAAI;AACA,UAAMkB,GAAG,GAAG,MAAM1B,GAAG,CAACK,GAAJ,CAAS,sBAAqB0B,UAAW,SAAQC,YAAa,EAA9D,CAAlB;AACA,WAAON,GAAG,CAACjB,IAAX;AAEH,GAJD,CAIE,OAAOC,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACmB,QAAd;AACH;AAEJ,CAVM;AAaP,OAAO,MAAMI,iBAAiB,GAAIC,SAAD,IAAe;AAC5C,SAAOA,SAAS,GAAG,CAAZ,GAAgB,SAAhB,GAA4B,EAAnC;AACH,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,IAAP,IAAgB;AAAC;AAEhD,MAAI;AACD,WAAQ,MAAMpC,GAAG,CAACK,GAAJ,CAAQP,SAAS,CAACQ,QAAV,CAAmB+B,kBAAnB,GAAwCD,IAAhD,CAAd;AAEF,GAHD,CAGE,OAAO1B,CAAP,EAAU,CAEX;AACJ,CARM","sourcesContent":["import {frontToBackEmployee} from \"../../../../Common Functions/PersonFunctions\";\r\nimport {webApiURL} from \"../../../../Constants/URLConstants\";\r\nimport axios from 'axios';\r\nimport api from '../../../Re-usable/Api Url/apiURL'\r\n\r\nexport const getEmployee = async (setEmployee, employeeId) => {\r\n\r\n    try {\r\n        const result = await api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setEmployee(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getEmployeeInformationService = async (setEmployee, setInvoices, employeeId) => {\r\n\r\n\r\n    const requestOne = api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\r\n    const requestTwo = api.get(webApiURL.invoice.getPatientsTreatedByDoctor + `${employeeId}`);\r\n    let data;\r\n  await axios.all([requestOne,requestTwo]).then(axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n        const responseTwo = responses[1]\r\n      data = responses[0]\r\n        console.log(\"employee\", responseOne.data)\r\n        console.log(\"responseTwo\", responseTwo.data)\r\n        setEmployee(responseOne.data)\r\n        setInvoices(responseTwo.data)\r\n    })).catch(e => {\r\n        console.log(e)\r\n    })\r\n    console.log(\"data   \", data)\r\n}\r\n\r\n\r\nexport const postEmployeeService = async (employee, id) => {\r\n\r\n    employee = frontToBackEmployee(employee);\r\n    if (id !== null) {\r\n        employee = {...employee, id: id}\r\n    }\r\n    try {\r\n        const res = await api.post(webApiURL.employee.postEmployee, employee);\r\n\r\n       return res;\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n    }\r\n}\r\n\r\n\r\nexport const getEmployeesListService = async (pageNumber, itemsPerPage) => {\r\n    console.log(\"employee list \")\r\n    try {\r\n        const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        return res.data\r\n\r\n    } catch (e) {\r\n        console.log(e.response)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkEmployeeDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findEmployeeService = async (name) => {//method to get the employees list based on the person name\r\n\r\n    try {\r\n       return  await api.get(webApiURL.employee.findEmployeeByName + name)\r\n\r\n    } catch (e) {\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}