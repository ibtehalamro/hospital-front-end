{"ast":null,"code":"//this method receive the person birth date and calculate his age\nexport const getPersonAge = d => {\n  return new Date().getFullYear() - new Date(d).getFullYear();\n};\nexport const getFullName = name => {\n  const {\n    firstName,\n    parentName,\n    grandName,\n    familyName\n  } = name;\n  return firstName + \" \" + parentName + \" \" + grandName + \" \" + familyName;\n};\nexport const frontToBackPatient = patient => {\n  //convert form object to backend object to be sent to the backendAPI\n  return {\n    \"person\": {\n      \"personName\": {\n        \"firstName\": patient.firstName,\n        \"parentName\": patient.parentName,\n        \"grandName\": patient.grandName,\n        \"familyName\": patient.familyName\n      },\n      \"village\": patient.village,\n      \"dateOfBirth\": patient.dateOfBirth,\n      \"gender\": patient.gender,\n      \"socialNumber\": patient.socialNumber,\n      \"mobileNumber\": patient.mobileNumber\n    },\n    \"socialStatus\": patient.socialStatus,\n    \"educationLevel\": patient.educationLevel,\n    \"jobTitle\": patient.jobTitle,\n    \"chronicDisease\": patient.chronicDisease,\n    \"disability\": patient.disability,\n    \"partnerRelation\": patient.partnerRelation,\n    \"smoker\": patient.smoker,\n    \"bloodGroup\": patient.bloodGroup,\n    \"allergies\": patient.allergies\n  };\n};\nexport const backToFrontPatient = patient => {\n  //convert backend object to form object\n  console.log(\"patient outside the if \", patient);\n\n  if (patient.data !== undefined) {\n    patient = patient.data;\n    console.log(\"patient in if\", patient);\n  } //just pass the res from the backend response\n\n\n  return {\n    firstName: patient.person.personName.firstName,\n    parentName: patient.person.personName.parentName,\n    grandName: patient.person.personName.grandName,\n    familyName: patient.person.personName.familyName,\n    gender: patient.person.gender,\n    dateOfBirth: patient.person.dateOfBirth,\n    mobileNumber: patient.person.mobileNumber,\n    allergies: patient.allergies,\n    village: patient.person.village,\n    bloodGroup: patient.bloodGroup,\n    socialNumber: patient.person.socialNumber,\n    socialStatus: patient.socialStatus,\n    educationLevel: patient.educationLevel,\n    jobTitle: patient.jobTitle,\n    chronicDisease: patient.chronicDisease,\n    disability: patient.disability,\n    partnerRelation: patient.partnerRelation,\n    smoker: patient.smoker\n  };\n};\nexport const frontToBackEmployee = employee => {\n  //convert form object to backend object to be sent to the backendAPI\n  return {\n    \"person\": {\n      \"personName\": {\n        \"firstName\": employee.firstName,\n        \"parentName\": employee.parentName,\n        \"grandName\": employee.grandName,\n        \"familyName\": employee.familyName\n      },\n      \"village\": employee.village,\n      \"dateOfBirth\": employee.dateOfBirth,\n      \"gender\": employee.gender,\n      \"socialNumber\": employee.socialNumber,\n      \"mobileNumber\": employee.mobileNumber\n    },\n    role: employee.role,\n    certificate: employee.certificate,\n    salary: employee.salary\n  };\n};\nexport const backToFrontEmployee = employee => {\n  //convert backend object to form object\n  //just pass the res from the backend response\n  return {\n    firstName: employee.data.person.personName.firstName,\n    parentName: employee.data.person.personName.parentName,\n    grandName: employee.data.person.personName.grandName,\n    familyName: employee.data.person.personName.familyName,\n    gender: employee.data.person.gender,\n    dateOfBirth: employee.data.person.dateOfBirth,\n    mobileNumber: employee.data.person.mobileNumber,\n    village: employee.data.person.village,\n    socialNumber: employee.data.person.socialNumber,\n    role: employee.data.role,\n    certificate: employee.data.certificate,\n    salary: employee.data.salary\n  };\n};\nexport const getDateFromTimeStamp = timeStamp => {\n  const timestamp = new Date(timeStamp);\n  let formattedTimestamp = Intl.DateTimeFormat('en-PS', {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\" // hour: \"numeric\",\n    // minute: \"2-digit\"\n\n  }).format(timestamp);\n  return formattedTimestamp;\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Common Functions/PersonFunctions.js"],"names":["getPersonAge","d","Date","getFullYear","getFullName","name","firstName","parentName","grandName","familyName","frontToBackPatient","patient","village","dateOfBirth","gender","socialNumber","mobileNumber","socialStatus","educationLevel","jobTitle","chronicDisease","disability","partnerRelation","smoker","bloodGroup","allergies","backToFrontPatient","console","log","data","undefined","person","personName","frontToBackEmployee","employee","role","certificate","salary","backToFrontEmployee","getDateFromTimeStamp","timeStamp","timestamp","formattedTimestamp","Intl","DateTimeFormat","year","month","day","format"],"mappings":"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","sourcesContent":["//this method receive the person birth date and calculate his age\r\n\r\nexport const getPersonAge = (d) => {\r\n    return new Date().getFullYear() - new Date(d).getFullYear()\r\n}\r\n\r\nexport const getFullName = (name) => {\r\n    const {firstName, parentName, grandName, familyName} = name;\r\n    return firstName + \" \" + parentName + \" \" + grandName + \" \" + familyName;\r\n}\r\nexport const frontToBackPatient = (patient) => {//convert form object to backend object to be sent to the backendAPI\r\n    return {\r\n        \"person\": {\r\n            \"personName\": {\r\n                \"firstName\": patient.firstName,\r\n                \"parentName\": patient.parentName,\r\n                \"grandName\": patient.grandName,\r\n                \"familyName\": patient.familyName\r\n            },\r\n            \"village\": patient.village,\r\n            \"dateOfBirth\": patient.dateOfBirth,\r\n            \"gender\": patient.gender,\r\n            \"socialNumber\": patient.socialNumber,\r\n            \"mobileNumber\": patient.mobileNumber\r\n        },\r\n        \"socialStatus\": patient.socialStatus,\r\n        \"educationLevel\": patient.educationLevel,\r\n        \"jobTitle\": patient.jobTitle,\r\n        \"chronicDisease\": patient.chronicDisease,\r\n        \"disability\": patient.disability,\r\n        \"partnerRelation\": patient.partnerRelation,\r\n        \"smoker\": patient.smoker,\r\n        \"bloodGroup\": patient.bloodGroup,\r\n        \"allergies\": patient.allergies\r\n\r\n    };\r\n\r\n}\r\nexport const backToFrontPatient = (patient) => {//convert backend object to form object\r\n    console.log(\"patient outside the if \", patient)\r\n\r\n    if(patient.data!==undefined){\r\n        patient=patient.data;\r\n        console.log(\"patient in if\", patient)\r\n    }\r\n\r\n//just pass the res from the backend response\r\n    return {\r\n        firstName: patient.person.personName.firstName,\r\n        parentName: patient.person.personName.parentName,\r\n        grandName: patient.person.personName.grandName,\r\n        familyName: patient.person.personName.familyName,\r\n        gender: patient.person.gender,\r\n        dateOfBirth: patient.person.dateOfBirth,\r\n        mobileNumber: patient.person.mobileNumber,\r\n        allergies: patient.allergies,\r\n        village: patient.person.village,\r\n        bloodGroup: patient.bloodGroup,\r\n        socialNumber: patient.person.socialNumber,\r\n        socialStatus: patient.socialStatus,\r\n        educationLevel: patient.educationLevel,\r\n        jobTitle: patient.jobTitle,\r\n        chronicDisease: patient.chronicDisease,\r\n        disability: patient.disability,\r\n        partnerRelation: patient.partnerRelation,\r\n        smoker: patient.smoker,\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const frontToBackEmployee = (employee) => {//convert form object to backend object to be sent to the backendAPI\r\n   return {\r\n        \"person\": {\r\n            \"personName\": {\r\n                \"firstName\": employee.firstName,\r\n                \"parentName\": employee.parentName,\r\n                \"grandName\": employee.grandName,\r\n                \"familyName\": employee.familyName\r\n            },\r\n            \"village\": employee.village,\r\n            \"dateOfBirth\": employee.dateOfBirth,\r\n            \"gender\": employee.gender,\r\n            \"socialNumber\": employee.socialNumber,\r\n            \"mobileNumber\": employee.mobileNumber\r\n        },\r\n       role: employee.role,\r\n       certificate: employee.certificate,\r\n       salary: employee.salary\r\n\r\n    }\r\n}\r\n\r\nexport const backToFrontEmployee = (employee) => {//convert backend object to form object\r\n//just pass the res from the backend response\r\n    return {\r\n        firstName: employee.data.person.personName.firstName,\r\n        parentName: employee.data.person.personName.parentName,\r\n        grandName: employee.data.person.personName.grandName,\r\n        familyName: employee.data.person.personName.familyName,\r\n        gender: employee.data.person.gender,\r\n        dateOfBirth: employee.data.person.dateOfBirth,\r\n        mobileNumber: employee.data.person.mobileNumber,\r\n        village: employee.data.person.village,\r\n        socialNumber: employee.data.person.socialNumber,\r\n        role: employee.data.role,\r\n        certificate: employee.data.certificate,\r\n        salary: employee.data.salary\r\n\r\n    }\r\n}\r\n\r\nexport const getDateFromTimeStamp=(timeStamp) => {\r\n    const timestamp = new Date(timeStamp);\r\n    let formattedTimestamp = Intl.DateTimeFormat('en-PS', {\r\n        year: \"numeric\",\r\n        month: \"short\",\r\n        day: \"2-digit\",\r\n        // hour: \"numeric\",\r\n        // minute: \"2-digit\"\r\n    }).format(timestamp);\r\n    return  formattedTimestamp\r\n\r\n}"]},"metadata":{},"sourceType":"module"}