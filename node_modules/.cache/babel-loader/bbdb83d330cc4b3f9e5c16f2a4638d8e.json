{"ast":null,"code":"import api from '../../../Re-usable/Api Url/apiURL';\nimport { frontToBackPatient } from \"../../../../Common Functions/PersonFunctions\";\nimport { patientURLS } from \"../../../../Constants/URLConstants\";\nimport axios from 'axios';\nexport const getPatient = async (setPatient, patientId) => {\n  try {\n    const result = await api.get(patientURLS.getPatient + `/${patientId}`);\n    console.log(\"m\", result.data);\n    setPatient(result.data);\n  } catch (e) {}\n};\nexport const getPatientInformation = async patientId => {\n  // const patient = api.get(patientURLS.getPatient + `/${patientId}`);\n  // const invoices = api.get(patientURLS.getPatientInvoices + `/${patientId}`);\n  //\n  // await api.all([patient, invoices]).then(api.spread((...response) => {\n  //     const patientResponse = response[0];\n  //     const invoicesResponse = response[1];\n  //\n  //     console.log(\"patient\",patientResponse)\n  //     console.log(\"invoices\",invoicesResponse)\n  // })).catch(e =>console.log(e))\n  let one = \"https://api.storyblok.com/v1/cdn/stories/health?version=published&token=wANpEQEsMYGOwLxwXQ76Ggtt\";\n  let two = \"https://api.storyblok.com/v1/cdn/datasources/?token=wANpEQEsMYGOwLxwXQ76Ggtt\";\n  let three = \"https://api.storyblok.com/v1/cdn/stories/vue?version=published&token=wANpEQEsMYGOwLxwXQ76Ggtt\";\n  const requestOne = api.get(patientURLS.getPatient + `/${patientId}`);\n  const requestTwo = api.get(patientURLS.getPatientInvoices + `/${patientId}`);\n  await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\n    const responseOne = responses[0];\n    const responseTwo = responses[1]; // use/access the results\n  })).catch(errors => {// react on errors.\n  });\n};\nexport const postPatient = async (patient, setServerError, setAdded, e) => {\n  setServerError(\"\");\n  setAdded(false);\n  patient = frontToBackPatient(patient);\n\n  try {\n    const result = await api.post(patientURLS.postPatient, patient);\n\n    if (result.status === 201) {\n      setAdded(true);\n      setTimeout(function () {\n        setAdded(false);\n      }, 5000);\n    }\n\n    e.target.reset();\n  } catch (e) {\n    console.log(e.response.data); //TODO handle validation errors\n\n    setServerError(e.response.data);\n  }\n};\nexport const submitPatient = patient => {\n  postPatient(patient).then(value => console.log('patient submitted'));\n};\nexport const getPatientsList = async (setPatient, setTotalPages, pageNumber, itemsPerPage) => {\n  try {\n    const res = await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`);\n    setTotalPages(res.data.totalPages);\n    setPatient(res.data.content);\n    return res.data.content;\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Patient/Patient Logic/PatientFunctions.js"],"names":["api","frontToBackPatient","patientURLS","axios","getPatient","setPatient","patientId","result","get","console","log","data","e","getPatientInformation","one","two","three","requestOne","requestTwo","getPatientInvoices","all","then","spread","responses","responseOne","responseTwo","catch","errors","postPatient","patient","setServerError","setAdded","post","status","setTimeout","target","reset","response","submitPatient","value","getPatientsList","setTotalPages","pageNumber","itemsPerPage","res","totalPages","content"],"mappings":"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","sourcesContent":["import api from '../../../Re-usable/Api Url/apiURL'\r\nimport {frontToBackPatient} from \"../../../../Common Functions/PersonFunctions\";\r\nimport {patientURLS} from \"../../../../Constants/URLConstants\";\r\nimport axios from 'axios';\r\n\r\nexport const getPatient = async (setPatient, patientId) => {\r\n\r\n    try {\r\n        const result = await api.get(patientURLS.getPatient + `/${patientId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setPatient(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getPatientInformation = async ( patientId) => {\r\n    // const patient = api.get(patientURLS.getPatient + `/${patientId}`);\r\n    // const invoices = api.get(patientURLS.getPatientInvoices + `/${patientId}`);\r\n    //\r\n    // await api.all([patient, invoices]).then(api.spread((...response) => {\r\n    //     const patientResponse = response[0];\r\n    //     const invoicesResponse = response[1];\r\n    //\r\n    //     console.log(\"patient\",patientResponse)\r\n    //     console.log(\"invoices\",invoicesResponse)\r\n    // })).catch(e =>console.log(e))\r\n    let one = \"https://api.storyblok.com/v1/cdn/stories/health?version=published&token=wANpEQEsMYGOwLxwXQ76Ggtt\"\r\n    let two = \"https://api.storyblok.com/v1/cdn/datasources/?token=wANpEQEsMYGOwLxwXQ76Ggtt\"\r\n    let three = \"https://api.storyblok.com/v1/cdn/stories/vue?version=published&token=wANpEQEsMYGOwLxwXQ76Ggtt\"\r\n\r\n    const requestOne = api.get(patientURLS.getPatient + `/${patientId}`);\r\n    const requestTwo = api.get(patientURLS.getPatientInvoices + `/${patientId}`);\r\n\r\n   await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n        const responseTwo = responses[1]\r\n      \r\n        // use/access the results\r\n    })).catch(errors => {\r\n        // react on errors.\r\n    })\r\n}\r\n\r\n\r\nexport const postPatient = async (patient, setServerError, setAdded, e) => {\r\n\r\n    setServerError(\"\");\r\n    setAdded(false)\r\n\r\n    patient = frontToBackPatient(patient);\r\n    try {\r\n        const result = await api.post(patientURLS.postPatient, patient);\r\n\r\n\r\n        if (result.status === 201) {\r\n            setAdded(true)\r\n            setTimeout(function () {\r\n                setAdded(false)\r\n            }, 5000);\r\n        }\r\n\r\n        e.target.reset();\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n        //TODO handle validation errors\r\n        setServerError(e.response.data);\r\n    }\r\n\r\n}\r\n\r\nexport const submitPatient = (patient) => {\r\n\r\n\r\n    postPatient(patient).then(value => console.log('patient submitted'));\r\n}\r\n\r\n\r\nexport const getPatientsList = async (setPatient, setTotalPages, pageNumber, itemsPerPage) => {\r\n    try {\r\n        const res = await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        setTotalPages(res.data.totalPages)\r\n        setPatient(res.data.content)\r\n\r\n        return res.data.content\r\n\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}