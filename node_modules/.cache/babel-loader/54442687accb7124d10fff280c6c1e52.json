{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\User Management\\\\LoginPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { login } from \"../../Redux/Actions/SecurityActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport TextInputCustom from \"../Re-usable/FormComponents/TextInputCustom\";\nimport { messages, registerObjectNames } from \"../../Common Functions/FormObjects\";\nimport { GET_ERRORS } from \"../../Redux/Types/Types\";\n\nconst LoginPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const error = useSelector(state => state.errors.invalidUser);\n  const state = useSelector(state => state.security);\n  const history = useHistory();\n  const {\n    register,\n    handleSubmit,\n    setError,\n    errors\n  } = useForm({\n    defaultValues: {\n      \"username\": \"mmn@aa.com\",\n      \"password\": \"12345\"\n    }\n  });\n\n  function onSubmit(data) {\n    dispatch(login(data, history));\n  }\n\n  useEffect(() => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n\n    if (error) {\n      setError(\"username\", {\n        \"type\": \"invalid\",\n        \"message\": \"User name is invalid\"\n      });\n      setError(\"password\", {\n        \"type\": \"invalid\",\n        \"message\": \"password is invalid\"\n      });\n    }\n  }, [error]);\n  useEffect(() => {\n    if (state.validToken) {\n      history.push(\"/dashboard\");\n    }\n  }, [state]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(TextInputCustom, {\n        field: \"username\",\n        label: \"Email\",\n        errorMessages: messages,\n        form: {\n          register,\n          errors,\n          registerObject: registerObjectNames\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInputCustom, {\n        field: \"password\",\n        label: \"Password\",\n        errorMessages: messages,\n        form: {\n          register,\n          errors,\n          registerObject: registerObjectNames\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"Gl21orcR9OBHWP64JAKhuZ8xg/8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useHistory, useForm];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/User Management/LoginPage.js"],"names":["React","useEffect","useForm","login","useDispatch","useSelector","useHistory","TextInputCustom","messages","registerObjectNames","GET_ERRORS","LoginPage","dispatch","error","state","errors","invalidUser","security","history","register","handleSubmit","setError","defaultValues","onSubmit","data","type","payload","validToken","push","registerObject"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAAQC,KAAR,QAAoB,qCAApB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,SAAQC,QAAR,EAAkBC,mBAAlB,QAA4C,oCAA5C;AACA,SAAQC,UAAR,QAAyB,yBAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAMS,KAAK,GAACR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,WAAvB,CAAvB;AAEA,QAAMF,KAAK,GAAGT,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACG,QAAhB,CAAzB;AACA,QAAMC,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAM;AAACa,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAwBC,IAAAA,QAAxB;AAAkCN,IAAAA;AAAlC,MAA4Cb,OAAO,CAAC;AACtDoB,IAAAA,aAAa,EAAE;AACX,kBAAY,YADD;AAEX,kBAAY;AAFD;AADuC,GAAD,CAAzD;;AAOA,WAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAEpBZ,IAAAA,QAAQ,CAACT,KAAK,CAACqB,IAAD,EAAMN,OAAN,CAAN,CAAR;AACH;;AAEDjB,EAAAA,SAAS,CAAC,MAAI;AACVW,IAAAA,QAAQ,CAAC;AACLa,MAAAA,IAAI,EAAEf,UADD;AAELgB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;;AAIA,QAAGb,KAAH,EAAS;AACLQ,MAAAA,QAAQ,CAAC,UAAD,EAAY;AAAC,gBAAO,SAAR;AAAkB,mBAAU;AAA5B,OAAZ,CAAR;AACAA,MAAAA,QAAQ,CAAC,UAAD,EAAY;AAAC,gBAAO,SAAR;AAAkB,mBAAU;AAA5B,OAAZ,CAAR;AACH;AACC,GATG,EASF,CAACR,KAAD,CATE,CAAT;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,KAAK,CAACa,UAAV,EAAsB;AAClBT,MAAAA,OAAO,CAACU,IAAR,CAAa,YAAb;AACH;AACJ,GAJQ,EAIN,CAACd,KAAD,CAJM,CAAT;AAMA,sBACI;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEM,YAAY,CAACG,QAAD,CAA5B;AAAA,8BACI,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,UAAvB;AAAkC,QAAA,KAAK,EAAC,OAAxC;AAAgD,QAAA,aAAa,EAAEf,QAA/D;AACiB,QAAA,IAAI,EAAE;AAACW,UAAAA,QAAD;AAAWJ,UAAAA,MAAX;AAAmBc,UAAAA,cAAc,EAAEpB;AAAnC;AADvB;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,UAAvB;AAAkC,QAAA,KAAK,EAAC,UAAxC;AAAmD,QAAA,aAAa,EAAED,QAAlE;AACiB,QAAA,IAAI,EAAE;AAACW,UAAAA,QAAD;AAAWJ,UAAAA,MAAX;AAAmBc,UAAAA,cAAc,EAAEpB;AAAnC;AADvB;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAjDD;;GAAME,S;UACeP,W,EAELC,W,EAEEA,W,EACEC,U,EACkCJ,O;;;KAPhDS,S;AAmDN,eAAeA,SAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {login} from \"../../Redux/Actions/SecurityActions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router\";\r\nimport TextInputCustom from \"../Re-usable/FormComponents/TextInputCustom\";\r\nimport {messages, registerObjectNames} from \"../../Common Functions/FormObjects\";\r\nimport {GET_ERRORS} from \"../../Redux/Types/Types\";\r\n\r\nconst LoginPage = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const error=useSelector(state => state.errors.invalidUser)\r\n\r\n    const state = useSelector(state => state.security)\r\n    const history = useHistory()\r\n    const {register, handleSubmit,setError, errors} = useForm({\r\n        defaultValues: {\r\n            \"username\": \"mmn@aa.com\",\r\n            \"password\": \"12345\"\r\n        }\r\n    });\r\n\r\n    function onSubmit(data) {\r\n\r\n        dispatch(login(data,history))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n        if(error){\r\n            setError(\"username\",{\"type\":\"invalid\",\"message\":\"User name is invalid\"})\r\n            setError(\"password\",{\"type\":\"invalid\",\"message\":\"password is invalid\"})\r\n        }\r\n         },[error])\r\n\r\n    useEffect(() => {\r\n        if (state.validToken) {\r\n            history.push(\"/dashboard\")\r\n        }\r\n    }, [state])\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <TextInputCustom field=\"username\" label=\"Email\" errorMessages={messages}\r\n                                 form={{register, errors, registerObject: registerObjectNames}}/>\r\n\r\n                <TextInputCustom field=\"password\" label=\"Password\" errorMessages={messages}\r\n                                 form={{register, errors, registerObject: registerObjectNames}}/>\r\n\r\n                <input type=\"submit\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}