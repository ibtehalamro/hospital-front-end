{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER } from \"../Types/Types\";\nimport apiURL from \"../../Components/Re-usable/Api Url/apiURL\";\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    await apiURL.post(\"/api/users/register\", newUser);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n    console.log(\"User registration\");\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const login = LoginRequest => async dispatch => {\n  try {\n    // post => Login Request\n    const res = await apiURL.post(\"/api/users/login\", LoginRequest); // extract token from res.data\n\n    const {\n      token\n    } = res.data; // store the token in the localStorage\n\n    localStorage.setItem(\"jwtToken\", token); // set our token in header ***\n\n    setJWTToken(token); // decode token on React\n\n    const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Redux/Actions/SecurityActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","apiURL","createNewUser","newUser","history","dispatch","post","push","type","payload","console","log","err","response","data","login","LoginRequest","res","token","localStorage","setItem","setJWTToken","decoded","jwt_decode"],"mappings":"AACA,SAAQA,UAAR,EAAoBC,gBAApB,QAA2C,gBAA3C;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACjE,MAAI;AACA,UAAMJ,MAAM,CAACK,IAAP,CAAY,qBAAZ,EAAmCH,OAAnC,CAAN;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,UADD;AAELU,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GARD,CAQE,OAAOC,GAAP,EAAY;AACVP,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,UADD;AAELU,MAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAfM;AAiBP,OAAO,MAAMC,KAAK,GAAGC,YAAY,IAAI,MAAMX,QAAN,IAAkB;AACnD,MAAI;AACA;AACA,UAAMY,GAAG,GAAG,MAAMhB,MAAM,CAACK,IAAP,CAAY,kBAAZ,EAAgCU,YAAhC,CAAlB,CAFA,CAGA;;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAYD,GAAG,CAACH,IAAtB,CAJA,CAKA;;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EANA,CAOA;;AACAG,IAAAA,WAAW,CAACH,KAAD,CAAX,CARA,CASA;;AACA,UAAMI,OAAO,GAAGC,UAAU,CAACL,KAAD,CAA1B,CAVA,CAWA;;AACAb,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,gBADD;AAELS,MAAAA,OAAO,EAAEa;AAFJ,KAAD,CAAR;AAIH,GAhBD,CAgBE,OAAOV,GAAP,EAAY;AACVP,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,UADD;AAELU,MAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAvBM","sourcesContent":["\r\nimport {GET_ERRORS, SET_CURRENT_USER} from \"../Types/Types\";\r\nimport apiURL from \"../../Components/Re-usable/Api Url/apiURL\";\r\n\r\nexport const createNewUser = (newUser, history) => async dispatch => {\r\n    try {\r\n        await apiURL.post(\"/api/users/register\", newUser);\r\n        history.push(\"/login\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n        console.log(\"User registration\")\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\nexport const login = LoginRequest => async dispatch => {\r\n    try {\r\n        // post => Login Request\r\n        const res = await apiURL.post(\"/api/users/login\", LoginRequest);\r\n        // extract token from res.data\r\n        const { token } = res.data;\r\n        // store the token in the localStorage\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        // set our token in header ***\r\n        setJWTToken(token);\r\n        // decode token on React\r\n        const decoded = jwt_decode(token);\r\n        // dispatch to our securityReducer\r\n        dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}