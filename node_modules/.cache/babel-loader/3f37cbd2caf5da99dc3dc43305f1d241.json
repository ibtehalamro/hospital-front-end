{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Clinics Components\\\\Clinic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from 'react';\nimport ClinicForm from \"./ClinicForm\";\nimport ClinicsTable from \"./ClinicsTable\";\nimport { getAllClinicsService } from \"./Clinics Functions/ClinicsServices\";\nimport api from \"../../Re-usable/Api Url/apiURL\";\nimport { webApiURL as webApiUrl } from \"../../../Constants/URLConstants\";\nimport { useParams } from \"react-router\";\n\nconst Clinic = props => {\n  _s();\n\n  // let clinicId = props.match !== undefined ? props.match.params.id : undefined\n  let {\n    id\n  } = useParams();\n  const [clinics, setClinics] = useState([]);\n  const [clinic, setClinic] = useState([]);\n\n  const getClinic = async () => {\n    try {\n      const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\n      setClinic(res.data);\n    } catch (e) {}\n  };\n\n  const getAllClinics = async () => {\n    setClinics(await getAllClinicsService());\n\n    if (clinicId !== undefined) {\n      //if the id is found in the url\n      await getClinic();\n    }\n  };\n\n  useLayoutEffect(() => {\n    let mounted = true;\n    if (mounted) getAllClinics();\n    return () => {\n      mounted = false;\n    };\n  }, [props.match]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clinics-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(ClinicForm, {\n      clinic: clinicId === undefined ? undefined : clinic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ClinicsTable, {\n      clinics: clinics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Clinic, \"VoMa/CUe+Y14ceI46mvFWLXaSd4=\", false, function () {\n  return [useParams];\n});\n\n_c = Clinic;\nexport default Clinic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Clinic\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Clinics Components/Clinic.js"],"names":["React","useLayoutEffect","useState","ClinicForm","ClinicsTable","getAllClinicsService","api","webApiURL","webApiUrl","useParams","Clinic","props","id","clinics","setClinics","clinic","setClinic","getClinic","res","get","clinicId","data","e","getAllClinics","undefined","mounted","match"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,eAAf,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,oBAAR,QAAmC,qCAAnC;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,SAAQC,SAAS,IAAIC,SAArB,QAAqC,iCAArC;AACA,SAAQC,SAAR,QAAwB,cAAxB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACtB;AAEA,MAAI;AAACC,IAAAA;AAAD,MAAKH,SAAS,EAAlB;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMe,SAAS,GAAG,YAAY;AAC1B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,GAAJ,CAAQX,SAAS,CAACK,OAAV,CAAkBI,SAAlB,GAA8BG,QAAtC,CAAlB;AACAJ,MAAAA,SAAS,CAACE,GAAG,CAACG,IAAL,CAAT;AACH,KAHD,CAGE,OAAOC,CAAP,EAAU,CAEX;AACJ,GAPD;;AAQA,QAAMC,aAAa,GAAG,YAAY;AAC9BT,IAAAA,UAAU,CAAC,MAAMT,oBAAoB,EAA3B,CAAV;;AACA,QAAIe,QAAQ,KAAKI,SAAjB,EAA4B;AAAC;AACzB,YAAMP,SAAS,EAAf;AACH;AACJ,GALD;;AAOAhB,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAIwB,OAAO,GAAG,IAAd;AAEA,QAAIA,OAAJ,EACIF,aAAa;AAEjB,WAAO,MAAM;AACTE,MAAAA,OAAO,GAAG,KAAV;AACH,KAFD;AAGH,GATc,EASZ,CAAGd,KAAK,CAACe,KAAT,CATY,CAAf;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEN,QAAQ,KAAKI,SAAb,GAAyBA,SAAzB,GAAqCT;AAAzD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAzCD;;GAAMH,M;UAGOD,S;;;KAHPC,M;AA2CN,eAAeA,MAAf","sourcesContent":["import React, {useLayoutEffect, useState} from 'react';\r\nimport ClinicForm from \"./ClinicForm\";\r\nimport ClinicsTable from \"./ClinicsTable\";\r\nimport {getAllClinicsService} from \"./Clinics Functions/ClinicsServices\";\r\nimport api from \"../../Re-usable/Api Url/apiURL\";\r\nimport {webApiURL as webApiUrl} from \"../../../Constants/URLConstants\";\r\nimport {useParams} from \"react-router\";\r\n\r\nconst Clinic = (props) => {\r\n    // let clinicId = props.match !== undefined ? props.match.params.id : undefined\r\n\r\n    let {id}=useParams()\r\n    const [clinics, setClinics] = useState([]);\r\n    const [clinic, setClinic] = useState([]);\r\n\r\n    const getClinic = async () => {\r\n        try {\r\n            const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\r\n            setClinic(res.data)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const getAllClinics = async () => {\r\n        setClinics(await getAllClinicsService());\r\n        if (clinicId !== undefined) {//if the id is found in the url\r\n            await getClinic()\r\n        }\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        let mounted = true\r\n\r\n        if (mounted)\r\n            getAllClinics()\r\n\r\n        return () => {\r\n            mounted = false\r\n        }\r\n    }, [  props.match])\r\n\r\n\r\n    return (\r\n        <div className=\"clinics-wrapper\">\r\n            <ClinicForm clinic={clinicId === undefined ? undefined : clinic}/>\r\n            <ClinicsTable clinics={clinics}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clinic;"]},"metadata":{},"sourceType":"module"}