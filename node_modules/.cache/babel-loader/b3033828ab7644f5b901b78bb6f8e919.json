{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport TextInputCustom from \"../../../Re-usable/FormComponents/TextInputCustom\";\nimport SelectCustom from \"../../../Re-usable/FormComponents/SelectCustom\";\nimport NumberInputCustom from \"../../../Re-usable/FormComponents/NumberInputCustom\";\nimport * as classnames from \"classnames\";\nimport { postPatient } from \"../Patient Logic/PatientFunctions\";\n\nconst PatientForm = ({\n  patient\n}) => {\n  _s();\n\n  // only the form here\n  const [added, setAdded] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const messages = {\n    \"required\": \" is required.\",\n    \"minLength\": \" must be at least 2 character's long.\"\n  };\n  const registerObject = {\n    required: true\n  };\n  const registerObjectNames = {\n    required: true,\n    minLength: 2\n  };\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [serverError, setServerError] = useState(\"\"); //if there is server errors returned stored here\n\n  const onSubmit = (data, e) => {\n    postPatient(data, setServerError, setAdded, e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"    \", loading === false ? \"dd\" : \"dd\"]\n  }, void 0, true);\n};\n\n_s(PatientForm, \"GKsdZivi5TA6w9hipDFtwAek9I0=\", false, function () {\n  return [useForm];\n});\n\n_c = PatientForm;\nexport default PatientForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientForm\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Patient/Patient Forms/PatientForm.js"],"names":["React","useState","useForm","TextInputCustom","SelectCustom","NumberInputCustom","classnames","postPatient","PatientForm","patient","added","setAdded","loading","setLoading","messages","registerObject","required","registerObjectNames","minLength","register","handleSubmit","errors","serverError","setServerError","onSubmit","data","e"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AAEA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,OAAOC,iBAAP,MAA8B,qDAA9B;AACA,OAAO,KAAKC,UAAZ,MAA4B,YAA5B;AACA,SAAQC,WAAR,QAA0B,mCAA1B;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAAA;;AACnC;AAEI,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAASC,UAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMa,QAAQ,GAAG;AACb,gBAAY,eADC;AAEX,iBAAa;AAFF,GAAjB;AAKA,QAAMC,cAAc,GAAG;AACnBC,IAAAA,QAAQ,EAAE;AADS,GAAvB;AAGA,QAAMC,mBAAmB,GAAG;AACxBD,IAAAA,QAAQ,EAAE,IADc;AAExBE,IAAAA,SAAS,EAAE;AAFa,GAA5B;AAMA,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAAmCnB,OAAO,EAAhD;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,EAAD,CAA9C,CArB+B,CAqBmB;;AAGlD,QAAMuB,QAAQ,GAAG,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC1BnB,IAAAA,WAAW,CAACkB,IAAD,EAAOF,cAAP,EAAsBZ,QAAtB,EAAgCe,CAAhC,CAAX;AAEH,GAHD;;AAKA,sBAAW;AAAA,uBAAOd,OAAO,KAAG,KAAV,GAAgB,IAAhB,GAAqB,IAA5B;AAAA,kBAAX;AAIH,CAjCD;;GAAMJ,W;UAoBuCN,O;;;KApBvCM,W;AAmCN,eAAeA,WAAf","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport {useForm} from \"react-hook-form\";\r\nimport TextInputCustom from \"../../../Re-usable/FormComponents/TextInputCustom\";\r\n\r\nimport SelectCustom from \"../../../Re-usable/FormComponents/SelectCustom\";\r\nimport NumberInputCustom from \"../../../Re-usable/FormComponents/NumberInputCustom\";\r\nimport * as classnames from \"classnames\";\r\nimport {postPatient} from \"../Patient Logic/PatientFunctions\";\r\n\r\n\r\nconst PatientForm = ({patient}) => {\r\n// only the form here\r\n\r\n    const [added, setAdded] = useState(null)\r\n    const [loading,setLoading] =useState(false)\r\n\r\n    const messages = {\r\n        \"required\": \" is required.\"\r\n        , \"minLength\": \" must be at least 2 character's long.\"\r\n    }\r\n\r\n    const registerObject = {\r\n        required: true\r\n    };\r\n    const registerObjectNames = {\r\n        required: true,\r\n        minLength: 2\r\n    };\r\n\r\n\r\n    const {register, handleSubmit, errors} = useForm();\r\n    const [serverError, setServerError] = useState(\"\")//if there is server errors returned stored here\r\n\r\n\r\n    const onSubmit = (data, e) => {\r\n        postPatient(data, setServerError,setAdded, e)\r\n\r\n    }\r\n\r\n    return  (  <>    {loading===false?\"dd\":\"dd\"}\r\n    </>)\r\n\r\n    ;\r\n};\r\n\r\nexport default PatientForm;"]},"metadata":{},"sourceType":"module"}