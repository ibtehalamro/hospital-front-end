{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Clinics Components\\\\ClinicForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { postClinic } from \"./Clinics Functions/ClinicsFunctions\";\nimport TextInputCustom from \"../../Re-usable/FormComponents/TextInputCustom\";\nimport { messages, registerObject } from \"../../../Common Functions/FormObjects\";\n\nfunction ClinicForm({\n  setUpdate,\n  clinic\n}) {\n  _s();\n\n  const {\n    handleSubmit,\n    errors,\n    reset,\n    register\n  } = useForm(clinic === undefined ? {} : {\n    defaultValues: {\n      \"clinicName\": clinic.clinicName\n    }\n  });\n  useEffect(() => {\n    console.log(\"--clinic form \", clinic);\n  }); // const getClinic = async (clinicId, setClinic) => {\n  //     try {\n  //         const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\n  //         setClinic(res.data)\n  //         // reset({clinicName:clinic.clinicName})\n  //\n  //         // console.log(\"clinic response \", res.data)\n  //     } catch (e) {\n  //\n  //     }\n  // }\n  //     useLayoutEffect( () => {\n  // const fetchData=async () => {\n  //     if (clinicId !== null) {//if the id is found in the url\n  //         setLoading(false)\n  //\n  //         await  getClinic(clinicId, setClinic)\n  //         // console.log(\"clinic from fetch\",clinic)\n  //         setLoading(true)\n  //     } else\n  //         setLoading(true)\n  //\n  // }\n  //  fetchData()\n  //\n  //     }, [    ])\n  //\n\n  function onSubmit(data, e) {\n    data.clinicName = data.clinicName.trim();\n    if (clinic.id !== undefined) data = { ...data,\n      id: clinic.id\n    };\n    postClinic(data).then(() => {\n      e.target.reset();\n      setUpdate();\n    });\n  } // console.log(\"Clinic\",clinic)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" clinic-form-container\",\n    children: [clinic === undefined ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"edit clinic \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"previous name : \", clinic.clinicName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mainTitle\",\n        children: \"Add Clinic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-weight-bold\",\n        children: \"Choose a unique clinic name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(TextInputCustom, {\n          field: \"clinicName\",\n          label: \"Clinic Name\",\n          errorMessages: messages,\n          form: {\n            register,\n            errors,\n            registerObject\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ClinicForm, \"3A5IDm0MEmT9tECo3vzxThvlAgg=\", false, function () {\n  return [useForm];\n});\n\n_c = ClinicForm;\nexport default ClinicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClinicForm\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Clinics Components/ClinicForm.js"],"names":["React","useEffect","useForm","postClinic","TextInputCustom","messages","registerObject","ClinicForm","setUpdate","clinic","handleSubmit","errors","reset","register","undefined","defaultValues","clinicName","console","log","onSubmit","data","e","trim","id","then","target"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACC,SAAQC,UAAR,QAAyB,sCAAzB;AACD,OAAOC,eAAP,MAA4B,gDAA5B;AACA,SAAQC,QAAR,EAAkBC,cAAlB,QAAuC,uCAAvC;;AAGA,SAASC,UAAT,CAAoB;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAApB,EAAyC;AAAA;;AAErC,QAAM;AAACC,IAAAA,YAAD;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA;AAA9B,MAA0CX,OAAO,CAACO,MAAM,KAAGK,SAAT,GAAmB,EAAnB,GAAuB;AAACC,IAAAA,aAAa,EAAC;AAAC,oBAAaN,MAAM,CAACO;AAArB;AAAf,GAAxB,CAAvD;AAEAf,EAAAA,SAAS,CAAC,MAAI;AACVgB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BT,MAA7B;AACH,GAFQ,CAAT,CAJqC,CASrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,WAASU,QAAT,CAAkBC,IAAlB,EAAwBC,CAAxB,EAA2B;AACvBD,IAAAA,IAAI,CAACJ,UAAL,GAAgBI,IAAI,CAACJ,UAAL,CAAgBM,IAAhB,EAAhB;AACC,QAAIb,MAAM,CAACc,EAAP,KAAcT,SAAlB,EACGM,IAAI,GAAG,EAAC,GAAGA,IAAJ;AAAUG,MAAAA,EAAE,EAAEd,MAAM,CAACc;AAArB,KAAP;AAEJpB,IAAAA,UAAU,CAACiB,IAAD,CAAV,CAAiBI,IAAjB,CAAsB,MAAM;AACxBH,MAAAA,CAAC,CAACI,MAAF,CAASb,KAAT;AACAJ,MAAAA,SAAS;AACZ,KAHD;AAIH,GA/CoC,CAkDzC;;;AACI,sBACI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA,eACKC,MAAM,KAAKK,SAAX,GAAuB,IAAvB,gBAEG;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,uCAAqBL,MAAM,CAACO,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,eAOI;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAM,QAAA,QAAQ,EAAEN,YAAY,CAACS,QAAD,CAA5B;AAAA,gCACI,QAAC,eAAD;AAAiB,UAAA,KAAK,EAAC,YAAvB;AAAoC,UAAA,KAAK,EAAC,aAA1C;AAAwD,UAAA,aAAa,EAAEd,QAAvE;AACiB,UAAA,IAAI,EAAE;AAACQ,YAAAA,QAAD;AAAWF,YAAAA,MAAX;AAAmBL,YAAAA;AAAnB;AADvB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GAxEQC,U;UAE2CL,O;;;KAF3CK,U;AA0ET,eAAeA,UAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\n import {postClinic} from \"./Clinics Functions/ClinicsFunctions\";\r\nimport TextInputCustom from \"../../Re-usable/FormComponents/TextInputCustom\";\r\nimport {messages, registerObject} from \"../../../Common Functions/FormObjects\";\r\n\r\n\r\nfunction ClinicForm({setUpdate, clinic}) {\r\n\r\n    const {handleSubmit, errors, reset, register} = useForm(clinic===undefined?{ }:{defaultValues:{\"clinicName\":clinic.clinicName}});\r\n\r\n    useEffect(()=>{\r\n        console.log(\"--clinic form \",clinic)\r\n    })\r\n\r\n\r\n    // const getClinic = async (clinicId, setClinic) => {\r\n    //     try {\r\n    //         const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\r\n    //         setClinic(res.data)\r\n    //         // reset({clinicName:clinic.clinicName})\r\n    //\r\n    //         // console.log(\"clinic response \", res.data)\r\n    //     } catch (e) {\r\n    //\r\n    //     }\r\n    // }\r\n\r\n//     useLayoutEffect( () => {\r\n// const fetchData=async () => {\r\n//     if (clinicId !== null) {//if the id is found in the url\r\n//         setLoading(false)\r\n//\r\n//         await  getClinic(clinicId, setClinic)\r\n//         // console.log(\"clinic from fetch\",clinic)\r\n//         setLoading(true)\r\n//     } else\r\n//         setLoading(true)\r\n//\r\n// }\r\n//  fetchData()\r\n//\r\n//     }, [    ])\r\n//\r\n\r\n    function onSubmit(data, e) {\r\n        data.clinicName=data.clinicName.trim();\r\n         if (clinic.id !== undefined)\r\n            data = {...data, id: clinic.id }\r\n\r\n        postClinic(data).then(() => {\r\n            e.target.reset();\r\n            setUpdate()\r\n        });\r\n    }\r\n\r\n\r\n// console.log(\"Clinic\",clinic)\r\n    return (\r\n        <div className=\" clinic-form-container\">\r\n            {clinic === undefined ? null\r\n                :\r\n                <div>\r\n                    <h4>edit clinic </h4>\r\n                    <h5>previous name : {clinic.clinicName}</h5>\r\n                </div>}\r\n            <>\r\n                <h1 className=\"mainTitle\">Add Clinic</h1>\r\n                <p className=\"font-weight-bold\">Choose a unique clinic name</p>\r\n                <form onSubmit={handleSubmit(onSubmit)} >\r\n                    <TextInputCustom field=\"clinicName\" label=\"Clinic Name\" errorMessages={messages}\r\n                                     form={{register, errors, registerObject}}/>\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n            </>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ClinicForm;"]},"metadata":{},"sourceType":"module"}