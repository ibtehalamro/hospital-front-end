{"ast":null,"code":"import { frontToBackEmployee } from \"../../../../Common Functions/PersonFunctions\";\nimport { employeeURLS, webApiURL } from \"../../../../Constants/URLConstants\";\nimport axios from 'axios';\nimport api from '../../../Re-usable/Api Url/apiURL';\nexport const getEmployee = async (setEmployee, employeeId) => {\n  try {\n    const result = await api.get(employeeURLS.getEmployee + `/${employeeId}`);\n    console.log(\"m\", result.data);\n    setEmployee(result.data);\n  } catch (e) {}\n};\nexport const getEmployeeInformation = async (setEmployee, setInvoices, employeeId) => {\n  const requestOne = api.get(employeeURLS.getEmployee + `/${employeeId}`);\n  const requestTwo = api.get(employeeURLS.getEmployeeInvoices + `/${employeeId}`);\n  await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\n    const responseOne = responses[0];\n    const responseTwo = responses[1];\n    console.log(\"employee\", responseOne.data);\n    console.log(\"invoices\", responseTwo.data);\n    setEmployee(responseOne.data);\n    setInvoices(responseTwo.data);\n  })).catch(e => {\n    console.log(e);\n  });\n};\nexport const postEmployeetest = async employee => {\n  try {\n    const result = await api.post(webApiURL.employee.postEmployee, employee);\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const postEmployee = async (employee, id, setServerError, setAdded, e) => {\n  setServerError(\"\");\n  setAdded(false);\n  employee = frontToBackEmployee(employee);\n\n  if (id !== null) {\n    employee = { ...employee,\n      id: id\n    };\n  }\n\n  try {\n    const result = await api.post(webApiURL.employee.postEmployee, employee);\n\n    if (result.status === 201) {\n      setAdded(true);\n      setTimeout(function () {\n        setAdded(false);\n      }, 5000);\n    }\n\n    e.target.reset();\n  } catch (e) {\n    console.log(e.response.data); //TODO handle validation errors\n\n    setServerError(e.response.data);\n  }\n};\nexport const submitEmployee = employee => {\n  postEmployee(employee).then(value => console.log('employee submitted'));\n};\nexport const getEmployeesList = async (setEmployee, setTotalPages, pageNumber, itemsPerPage) => {\n  console.log(\"employee list \");\n\n  try {\n    const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`);\n    setTotalPages(res.data.totalPages);\n    setEmployee(res.data.content);\n    return res.data.content;\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const checkEmployeeDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findEmployeesForm = async (name, setEmployeesList, setServerError) => {\n  //method to get the employees list based on the person name if there is any error it is stored in the --> serverError\n  console.log(name);\n\n  try {\n    const res = await api.get(webApiURL.employee.findEmployee + name);\n    setEmployeesList(res.data);\n  } catch (e) {\n    if (e.response) setServerError(e.response.data);\n    setEmployeesList([]);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Employee/Employee Logic/EmployeeFunctions.js"],"names":["frontToBackEmployee","employeeURLS","webApiURL","axios","api","getEmployee","setEmployee","employeeId","result","get","console","log","data","e","getEmployeeInformation","setInvoices","requestOne","requestTwo","getEmployeeInvoices","all","then","spread","responses","responseOne","responseTwo","catch","postEmployeetest","employee","post","postEmployee","response","id","setServerError","setAdded","status","setTimeout","target","reset","submitEmployee","value","getEmployeesList","setTotalPages","pageNumber","itemsPerPage","res","totalPages","content","checkEmployeeDept","dueAmount","findEmployeesForm","name","setEmployeesList","findEmployee"],"mappings":"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","sourcesContent":["import {frontToBackEmployee} from \"../../../../Common Functions/PersonFunctions\";\r\nimport {employeeURLS, webApiURL} from \"../../../../Constants/URLConstants\";\r\nimport axios from 'axios';\r\nimport api from '../../../Re-usable/Api Url/apiURL'\r\n\r\nexport const getEmployee = async (setEmployee, employeeId) => {\r\n\r\n    try {\r\n        const result = await api.get(employeeURLS.getEmployee + `/${employeeId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setEmployee(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getEmployeeInformation = async (setEmployee, setInvoices, employeeId) => {\r\n\r\n\r\n    const requestOne = api.get(employeeURLS.getEmployee + `/${employeeId}`);\r\n    const requestTwo = api.get(employeeURLS.getEmployeeInvoices + `/${employeeId}`);\r\n\r\n    await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n        const responseTwo = responses[1]\r\n        console.log(\"employee\", responseOne.data)\r\n        console.log(\"invoices\", responseTwo.data)\r\n        setEmployee(responseOne.data)\r\n        setInvoices(responseTwo.data)\r\n    })).catch(e => {\r\n        console.log(e)\r\n    })\r\n}\r\nexport const postEmployeetest = async (employee ) => {\r\n\r\n\r\n\r\n    try {\r\n        const result = await api.post(webApiURL.employee.postEmployee, employee);\r\n\r\n\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const postEmployee = async (employee, id, setServerError, setAdded, e) => {\r\n\r\n    setServerError(\"\");\r\n    setAdded(false)\r\n\r\n    employee = frontToBackEmployee(employee);\r\n    if (id !== null) {\r\n        employee = {...employee, id: id}\r\n    }\r\n    try {\r\n        const result = await api.post(webApiURL.employee.postEmployee, employee);\r\n\r\n\r\n        if (result.status === 201) {\r\n            setAdded(true)\r\n            setTimeout(function () {\r\n                setAdded(false)\r\n            }, 5000);\r\n        }\r\n\r\n        e.target.reset();\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n        //TODO handle validation errors\r\n        setServerError(e.response.data);\r\n    }\r\n\r\n}\r\n\r\nexport const submitEmployee = (employee) => {\r\n\r\n\r\n    postEmployee(employee).then(value => console.log('employee submitted'));\r\n}\r\n\r\n\r\nexport const getEmployeesList = async (setEmployee, setTotalPages, pageNumber, itemsPerPage) => {\r\n    console.log(\"employee list \")\r\n    try {\r\n        const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        setTotalPages(res.data.totalPages)\r\n        setEmployee(res.data.content)\r\n\r\n        return res.data.content\r\n\r\n    } catch (e) {\r\n        console.log(e.response)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkEmployeeDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findEmployeesForm = async (name, setEmployeesList, setServerError) => {//method to get the employees list based on the person name if there is any error it is stored in the --> serverError\r\n    console.log(name)\r\n    try {\r\n        const res = await api.get(webApiURL.employee.findEmployee + name)\r\n        setEmployeesList(res.data)\r\n    } catch (e) {\r\n        if (e.response)\r\n            setServerError(e.response.data)\r\n        setEmployeesList([])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}