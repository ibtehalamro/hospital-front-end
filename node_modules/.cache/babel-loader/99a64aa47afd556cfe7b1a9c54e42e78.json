{"ast":null,"code":"import { frontToBackEmployee } from \"../../../../Common Functions/PersonFunctions\";\nimport { employeeURLS, webApiURL } from \"../../../../Constants/URLConstants\";\nimport axios from 'axios';\nimport api from '../../../Re-usable/Api Url/apiURL';\nexport const getEmployee = async (setEmployee, employeeId) => {\n  try {\n    const result = await api.get(employeeURLS.getEmployee + `/${employeeId}`);\n    console.log(\"m\", result.data);\n    setEmployee(result.data);\n  } catch (e) {}\n};\nexport const getEmployeeInformation = async (setEmployee, setInvoices, employeeId) => {\n  const requestOne = api.get(webApiURL.employee.getEmployee + `/${employeeId}`); // const requestTwo = api.get(employeeURLS.getEmployeeInvoices + `/${employeeId}`);\n\n  await axios.all([requestOne]).then(axios.spread((...responses) => {\n    const responseOne = responses[0];\n    console.log(\"employee\", responseOne.data);\n    setEmployee(responseOne.data);\n  })).catch(e => {\n    console.log(e);\n  });\n};\nexport const postEmployeetest = async employee => {\n  try {\n    await api.post(webApiURL.employee.postEmployee, employee);\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const postEmployee = async (employee, id, setServerError, setAdded, e) => {\n  setServerError(\"\");\n  setAdded(false);\n  employee = frontToBackEmployee(employee);\n\n  if (id !== null) {\n    employee = { ...employee,\n      id: id\n    };\n  }\n\n  try {\n    const result = await api.post(webApiURL.employee.postEmployee, employee);\n\n    if (result.status === 201) {\n      setAdded(true);\n      setTimeout(function () {\n        setAdded(false);\n      }, 5000);\n    }\n\n    e.target.reset();\n  } catch (e) {\n    console.log(e.response.data); //TODO handle validation errors\n\n    setServerError(e.response.data);\n  }\n};\nexport const submitEmployee = employee => {\n  postEmployee(employee).then(value => console.log('employee submitted'));\n};\nexport const getEmployeesList = async (pageNumber, itemsPerPage) => {\n  console.log(\"employee list \");\n\n  try {\n    const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`);\n    return res.data;\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const checkEmployeeDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findEmployeesForm = async (name, setEmployeesList, setServerError) => {\n  //method to get the employees list based on the person name if there is any error it is stored in the --> serverError\n  console.log(name);\n\n  try {\n    const res = await api.get(webApiURL.employee.findEmployeeByName + name);\n    setEmployeesList(res.data);\n  } catch (e) {\n    if (e.response) setServerError(e.response.data);\n    setEmployeesList([]);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Employee/Employee Logic/EmployeeFunctions.js"],"names":["frontToBackEmployee","employeeURLS","webApiURL","axios","api","getEmployee","setEmployee","employeeId","result","get","console","log","data","e","getEmployeeInformation","setInvoices","requestOne","employee","all","then","spread","responses","responseOne","catch","postEmployeetest","post","postEmployee","response","id","setServerError","setAdded","status","setTimeout","target","reset","submitEmployee","value","getEmployeesList","pageNumber","itemsPerPage","res","checkEmployeeDept","dueAmount","findEmployeesForm","name","setEmployeesList","findEmployeeByName"],"mappings":"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","sourcesContent":["import {frontToBackEmployee} from \"../../../../Common Functions/PersonFunctions\";\r\nimport {employeeURLS, webApiURL} from \"../../../../Constants/URLConstants\";\r\nimport axios from 'axios';\r\nimport api from '../../../Re-usable/Api Url/apiURL'\r\n\r\nexport const getEmployee = async (setEmployee, employeeId) => {\r\n\r\n    try {\r\n        const result = await api.get(employeeURLS.getEmployee + `/${employeeId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setEmployee(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getEmployeeInformation = async (setEmployee, setInvoices, employeeId) => {\r\n\r\n\r\n    const requestOne = api.get(webApiURL.employee.getEmployee + `/${employeeId}`);\r\n    // const requestTwo = api.get(employeeURLS.getEmployeeInvoices + `/${employeeId}`);\r\n\r\n    await axios.all([requestOne ]).then(axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n         console.log(\"employee\", responseOne.data)\r\n         setEmployee(responseOne.data)\r\n     })).catch(e => {\r\n        console.log(e)\r\n    })\r\n}\r\nexport const postEmployeetest = async (employee ) => {\r\n\r\n\r\n\r\n    try {\r\n       await api.post(webApiURL.employee.postEmployee, employee);\r\n\r\n\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const postEmployee = async (employee, id, setServerError, setAdded, e) => {\r\n\r\n    setServerError(\"\");\r\n    setAdded(false)\r\n\r\n    employee = frontToBackEmployee(employee);\r\n    if (id !== null) {\r\n        employee = {...employee, id: id}\r\n    }\r\n    try {\r\n        const result = await api.post(webApiURL.employee.postEmployee, employee);\r\n\r\n\r\n        if (result.status === 201) {\r\n            setAdded(true)\r\n            setTimeout(function () {\r\n                setAdded(false)\r\n            }, 5000);\r\n        }\r\n\r\n        e.target.reset();\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n        //TODO handle validation errors\r\n        setServerError(e.response.data);\r\n    }\r\n\r\n}\r\n\r\nexport const submitEmployee = (employee) => {\r\n\r\n\r\n    postEmployee(employee).then(value => console.log('employee submitted'));\r\n}\r\n\r\n\r\nexport const getEmployeesList = async (  pageNumber, itemsPerPage) => {\r\n    console.log(\"employee list \")\r\n    try {\r\n        const res = await api.get(`/employee/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        return res.data\r\n\r\n    } catch (e) {\r\n        console.log(e.response)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkEmployeeDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findEmployeesForm = async (name, setEmployeesList, setServerError) => {//method to get the employees list based on the person name if there is any error it is stored in the --> serverError\r\n    console.log(name)\r\n    try {\r\n        const res = await api.get(webApiURL.employee.findEmployeeByName + name)\r\n        setEmployeesList(res.data)\r\n    } catch (e) {\r\n        if (e.response)\r\n            setServerError(e.response.data)\r\n        setEmployeesList([])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}