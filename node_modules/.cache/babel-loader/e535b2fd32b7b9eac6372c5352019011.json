{"ast":null,"code":"import { GET_ERRORS, SET_BACKEND_NOT_REACHED, SET_CURRENT_USER, SET_INVLAID_USER_RESPONSE } from \"../Types/Types\";\nimport apiURL from \"../../Components/Re-usable/Api Url/apiURL\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"../../Components/User Management/Security/setJWTToken\";\nimport { errorHandler } from \"../../Errors/ErrorHandler\";\nexport const createNewUser = (newUser, history) => async dispatch => {\n  dispatch({\n    type: GET_ERRORS,\n    payload: {}\n  });\n\n  try {\n    await apiURL.post(\"/api/users/register\", newUser);\n    history.push(\"/login\");\n    console.log(\"User registration\");\n  } catch (error) {\n    if (error.response) {\n      // Request made and server responded\n      dispatch({\n        type: SET_INVLAID_USER_RESPONSE,\n        payload: error.response.data.message\n      });\n    } else if (error.request) {\n      dispatch({\n        type: SET_BACKEND_NOT_REACHED,\n        payload: \"backend not reached\"\n      });\n      history.push(\"/*\");\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error from copy', error.message);\n    }\n  }\n};\nexport const login = (LoginRequest, history) => async dispatch => {\n  try {\n    // post => Login Request\n    const res = await apiURL.post(\"/api/users/login\", LoginRequest); // extract token from res.data\n\n    const {\n      token\n    } = res.data; // store the token in the localStorage\n\n    localStorage.setItem(\"jwtToken\", token); // set our token in header ***\n\n    setJWTToken(token); // decode token on React\n\n    const decoded = jwt_decode(token);\n    console.log(\"decoded token\", decoded); // dispatch to our securityReducer\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (error) {\n    if (error.response) {\n      // Request made and server responded\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n      dispatch({\n        type: SET_INVLAID_USER_RESPONSE,\n        payload: error.response.data\n      });\n      history.push(\"/login\");\n    } else if (error.request) {\n      // The request was made but no response was received\n      // console.log(error.request);\n      dispatch({\n        type: SET_BACKEND_NOT_REACHED,\n        payload: \"backend not reached\"\n      });\n      history.push(\"/*\");\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error from copy', error.message);\n    }\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Redux/Actions/SecurityActions.js"],"names":["GET_ERRORS","SET_BACKEND_NOT_REACHED","SET_CURRENT_USER","SET_INVLAID_USER_RESPONSE","apiURL","jwt_decode","setJWTToken","errorHandler","createNewUser","newUser","history","dispatch","type","payload","post","push","console","log","error","response","data","message","request","login","LoginRequest","res","token","localStorage","setItem","decoded","status","headers","logout","removeItem"],"mappings":"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","sourcesContent":["import {GET_ERRORS, SET_BACKEND_NOT_REACHED, SET_CURRENT_USER, SET_INVLAID_USER_RESPONSE} from \"../Types/Types\";\r\nimport apiURL from \"../../Components/Re-usable/Api Url/apiURL\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setJWTToken from \"../../Components/User Management/Security/setJWTToken\";\r\nimport {errorHandler} from \"../../Errors/ErrorHandler\";\r\n\r\n\r\nexport const createNewUser = (newUser, history) => async dispatch => {\r\n    dispatch({\r\n        type: GET_ERRORS,\r\n        payload: {}\r\n    });\r\n    try {\r\n        await apiURL.post(\"/api/users/register\", newUser);\r\n        history.push(\"/login\");\r\n\r\n        console.log(\"User registration\")\r\n    } catch (error) {\r\n        if (error.response) {\r\n            // Request made and server responded\r\n            dispatch({\r\n                type: SET_INVLAID_USER_RESPONSE,\r\n                payload: error.response.data.message\r\n            });\r\n        } else if (error.request) {\r\n\r\n            dispatch({\r\n                type: SET_BACKEND_NOT_REACHED,\r\n                payload: \"backend not reached\"\r\n            });\r\n            history.push(\"/*\")\r\n\r\n        } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n            console.log('Error from copy', error.message);\r\n        }\r\n\r\n\r\n    }\r\n};\r\n\r\n\r\nexport const login = (LoginRequest,history) => async dispatch => {\r\n    try {\r\n        // post => Login Request\r\n        const res = await apiURL.post(\"/api/users/login\", LoginRequest);\r\n        // extract token from res.data\r\n        const {token} = res.data;\r\n        // store the token in the localStorage\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        // set our token in header ***\r\n        setJWTToken(token);\r\n        // decode token on React\r\n        const decoded = jwt_decode(token);\r\n        console.log(\"decoded token\", decoded)\r\n        // dispatch to our securityReducer\r\n        dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n    } catch (error) {\r\n        if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n            dispatch({\r\n                type: SET_INVLAID_USER_RESPONSE,\r\n                payload: error.response.data\r\n            });\r\n            history.push(\"/login\")\r\n\r\n        } else if (error.request) {\r\n            // The request was made but no response was received\r\n            // console.log(error.request);\r\n            dispatch({\r\n                type: SET_BACKEND_NOT_REACHED,\r\n                payload: \"backend not reached\"\r\n            });\r\n            history.push(\"/*\")\r\n\r\n        } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n            console.log('Error from copy', error.message);\r\n        }\r\n\r\n\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setJWTToken(false);\r\n    dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: {}\r\n    });\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}