{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER } from \"../Types/Types\";\nimport apiURL from \"../../Components/Re-usable/Api Url/apiURL\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"../../Components/User Management/Security/setJWTToken\";\nimport { errorHandler } from \"../../Errors/ErrorHandler\";\nimport { useHistory } from \"react-router\";\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    await apiURL.post(\"/api/users/register\", newUser);\n    history.push(\"/login\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n    console.log(\"User registration\");\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const login = LoginRequest => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    try {\n      // post => Login Request\n      const res = await apiURL.post(\"/api/users/login\", LoginRequest); // extract token from res.data\n\n      const {\n        token\n      } = res.data; // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token);\n      console.log(\"decoded token\", decoded); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded\n      });\n    } catch (err) {\n      const history = useHistory();\n      errorHandler(err, dispatch, history);\n    }\n  }, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n    return [useHistory];\n  });\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Redux/Actions/SecurityActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","apiURL","jwt_decode","setJWTToken","errorHandler","useHistory","createNewUser","newUser","history","dispatch","post","push","type","payload","console","log","err","response","data","login","LoginRequest","res","token","localStorage","setItem","decoded","logout","removeItem"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,gBAApB,QAA2C,gBAA3C;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,WAAP,MAAwB,uDAAxB;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,SAAQC,UAAR,QAAyB,cAAzB;AAGA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAMC,QAAN,IAAkB;AACjE,MAAI;AACA,UAAMR,MAAM,CAACS,IAAP,CAAY,qBAAZ,EAAmCH,OAAnC,CAAN;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEb,UADD;AAELc,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GARD,CAQE,OAAOC,GAAP,EAAY;AACVP,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEb,UADD;AAELc,MAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAfM;AAkBP,OAAO,MAAMC,KAAK,GAAGC,YAAY;AAAA;;AAAA,YAAI,MAAMX,QAAN,IAAkB;AAAA;;AACnD,QAAI;AACA;AACA,YAAMY,GAAG,GAAG,MAAMpB,MAAM,CAACS,IAAP,CAAY,kBAAZ,EAAgCU,YAAhC,CAAlB,CAFA,CAGA;;AACA,YAAM;AAACE,QAAAA;AAAD,UAAUD,GAAG,CAACH,IAApB,CAJA,CAKA;;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EANA,CAOA;;AACAnB,MAAAA,WAAW,CAACmB,KAAD,CAAX,CARA,CASA;;AACA,YAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BU,OAA7B,EAXA,CAYA;;AACAhB,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEZ,gBADD;AAELa,QAAAA,OAAO,EAAEY;AAFJ,OAAD,CAAR;AAIH,KAjBD,CAiBE,OAAOT,GAAP,EAAY;AACV,YAAMR,OAAO,GAAGH,UAAU,EAA1B;AACAD,MAAAA,YAAY,CAACY,GAAD,EAAMP,QAAN,EAAeD,OAAf,CAAZ;AAEH;AACJ,GAvBgC;AAAA,YAmBTH,UAnBS;AAAA;AAAA,CAA1B;AAyBP,OAAO,MAAMqB,MAAM,GAAG,MAAMjB,QAAQ,IAAI;AACpCc,EAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACAxB,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAM,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAE;AAFJ,GAAD,CAAR;AAIH,CAPM","sourcesContent":["import {GET_ERRORS, SET_CURRENT_USER} from \"../Types/Types\";\r\nimport apiURL from \"../../Components/Re-usable/Api Url/apiURL\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setJWTToken from \"../../Components/User Management/Security/setJWTToken\";\r\nimport {errorHandler} from \"../../Errors/ErrorHandler\";\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nexport const createNewUser = (newUser, history) => async dispatch => {\r\n    try {\r\n        await apiURL.post(\"/api/users/register\", newUser);\r\n        history.push(\"/login\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n        console.log(\"User registration\")\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const login = LoginRequest => async dispatch => {\r\n    try {\r\n        // post => Login Request\r\n        const res = await apiURL.post(\"/api/users/login\", LoginRequest);\r\n        // extract token from res.data\r\n        const {token} = res.data;\r\n        // store the token in the localStorage\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        // set our token in header ***\r\n        setJWTToken(token);\r\n        // decode token on React\r\n        const decoded = jwt_decode(token);\r\n        console.log(\"decoded token\", decoded)\r\n        // dispatch to our securityReducer\r\n        dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n    } catch (err) {\r\n        const history = useHistory()\r\n        errorHandler(err, dispatch,history);\r\n\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setJWTToken(false);\r\n    dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: {}\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}