{"ast":null,"code":"import api from '../../../Re-usable/Api Url/apiURL';\nimport { frontToBackPatient } from \"../../../../Common Functions/PersonFunctions\";\nimport { patientURLS } from \"../../../../Constants/URLConstants\";\nimport axios from 'axios';\nexport const getPatient = async (setPatient, patientId) => {\n  try {\n    const result = await api.get(patientURLS.getPatient + `/${patientId}`);\n    console.log(\"m\", result.data);\n    setPatient(result.data);\n  } catch (e) {}\n};\nexport const getPatientInformation = async (setPatient, setInvoices, patientId) => {\n  const requestOne = api.get(patientURLS.getPatient + `/${patientId}`);\n  const requestTwo = api.get(patientURLS.getPatientInvoices + `/${patientId}`);\n  await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\n    const responseOne = responses[0];\n    const responseTwo = responses[1];\n    console.log(\"patient\", responseOne.data);\n    console.log(\"invoices\", responseTwo.data);\n    setPatient(responseOne.data);\n    setInvoices(responseTwo.data);\n  })).catch(e => {\n    console.log(e);\n  });\n};\nexport const postPatienttest = async patient => {\n  patient = frontToBackPatient(patient);\n\n  if (id !== null) {\n    patient = { ...patient,\n      id: id\n    };\n  }\n\n  try {\n    const result = await api.post(patientURLS.postPatient, patient);\n\n    if (result.status === 201) {\n      setAdded(true);\n      setTimeout(function () {\n        setAdded(false);\n      }, 5000);\n    }\n\n    e.target.reset();\n  } catch (e) {\n    console.log(e.response.data); //TODO handle validation errors\n\n    setServerError(e.response.data);\n  }\n};\nexport const postPatient = async (patient, id, setServerError, setAdded, e) => {\n  setServerError(\"\");\n  setAdded(false);\n  patient = frontToBackPatient(patient);\n\n  if (id !== null) {\n    patient = { ...patient,\n      id: id\n    };\n  }\n\n  try {\n    const result = await api.post(patientURLS.postPatient, patient);\n\n    if (result.status === 201) {\n      setAdded(true);\n      setTimeout(function () {\n        setAdded(false);\n      }, 5000);\n    }\n\n    e.target.reset();\n  } catch (e) {\n    console.log(e.response.data); //TODO handle validation errors\n\n    setServerError(e.response.data);\n  }\n};\nexport const submitPatient = patient => {\n  postPatient(patient).then(value => console.log('patient submitted'));\n};\nexport const getPatientsList = async (setPatient, setTotalPages, pageNumber, itemsPerPage) => {\n  try {\n    const res = await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`);\n    setTotalPages(res.data.totalPages);\n    setPatient(res.data.content);\n    return res.data.content;\n  } catch (e) {\n    console.log(e.response.data);\n  }\n};\nexport const checkPatientDept = dueAmount => {\n  return dueAmount > 0 ? \"hasDept\" : \"\";\n};\nexport const findPatientsForm = async (name, setPatientsList, setServerError) => {\n  //method to get the patients list based on the person name if there is any error it is stored in the --> serverError\n  console.log(name);\n\n  try {\n    const res = await api.get(patientURLS.findPatients + name);\n    setPatientsList(res.data);\n  } catch (e) {\n    if (e.response) setServerError(e.response.data);\n    setPatientsList([]);\n  }\n};","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Patient/Patient Logic/PatientFunctions.js"],"names":["api","frontToBackPatient","patientURLS","axios","getPatient","setPatient","patientId","result","get","console","log","data","e","getPatientInformation","setInvoices","requestOne","requestTwo","getPatientInvoices","all","then","spread","responses","responseOne","responseTwo","catch","postPatienttest","patient","id","post","postPatient","status","setAdded","setTimeout","target","reset","response","setServerError","submitPatient","value","getPatientsList","setTotalPages","pageNumber","itemsPerPage","res","totalPages","content","checkPatientDept","dueAmount","findPatientsForm","name","setPatientsList","findPatients"],"mappings":"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","sourcesContent":["import api from '../../../Re-usable/Api Url/apiURL'\r\nimport {frontToBackPatient} from \"../../../../Common Functions/PersonFunctions\";\r\nimport {patientURLS} from \"../../../../Constants/URLConstants\";\r\nimport axios from 'axios';\r\n\r\nexport const getPatient = async (setPatient, patientId) => {\r\n\r\n    try {\r\n        const result = await api.get(patientURLS.getPatient + `/${patientId}`);\r\n\r\n        console.log(\"m\", result.data)\r\n        setPatient(result.data)\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getPatientInformation = async (setPatient, setInvoices, patientId) => {\r\n\r\n\r\n    const requestOne = api.get(patientURLS.getPatient + `/${patientId}`);\r\n    const requestTwo = api.get(patientURLS.getPatientInvoices + `/${patientId}`);\r\n\r\n    await axios.all([requestOne, requestTwo]).then(axios.spread((...responses) => {\r\n        const responseOne = responses[0]\r\n        const responseTwo = responses[1]\r\n        console.log(\"patient\", responseOne.data)\r\n        console.log(\"invoices\", responseTwo.data)\r\n        setPatient(responseOne.data)\r\n        setInvoices(responseTwo.data)\r\n    })).catch(e => {\r\n        console.log(e)\r\n    })\r\n}\r\nexport const postPatienttest = async (patient ) => {\r\n\r\n\r\n\r\n    patient = frontToBackPatient(patient);\r\n    if (id !== null) {\r\n        patient = {...patient, id: id}\r\n    }\r\n    try {\r\n        const result = await api.post(patientURLS.postPatient, patient);\r\n\r\n\r\n        if (result.status === 201) {\r\n            setAdded(true)\r\n            setTimeout(function () {\r\n                setAdded(false)\r\n            }, 5000);\r\n        }\r\n\r\n        e.target.reset();\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n        //TODO handle validation errors\r\n        setServerError(e.response.data);\r\n    }\r\n\r\n}\r\n\r\nexport const postPatient = async (patient, id, setServerError, setAdded, e) => {\r\n\r\n    setServerError(\"\");\r\n    setAdded(false)\r\n\r\n    patient = frontToBackPatient(patient);\r\n    if (id !== null) {\r\n        patient = {...patient, id: id}\r\n    }\r\n    try {\r\n        const result = await api.post(patientURLS.postPatient, patient);\r\n\r\n\r\n        if (result.status === 201) {\r\n            setAdded(true)\r\n            setTimeout(function () {\r\n                setAdded(false)\r\n            }, 5000);\r\n        }\r\n\r\n        e.target.reset();\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n\r\n        //TODO handle validation errors\r\n        setServerError(e.response.data);\r\n    }\r\n\r\n}\r\n\r\nexport const submitPatient = (patient) => {\r\n\r\n\r\n    postPatient(patient).then(value => console.log('patient submitted'));\r\n}\r\n\r\n\r\nexport const getPatientsList = async (setPatient, setTotalPages, pageNumber, itemsPerPage) => {\r\n    try {\r\n        const res = await api.get(`/patient/all?page=${pageNumber}&size=${itemsPerPage}`)\r\n        setTotalPages(res.data.totalPages)\r\n        setPatient(res.data.content)\r\n\r\n        return res.data.content\r\n\r\n    } catch (e) {\r\n        console.log(e.response.data)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const checkPatientDept = (dueAmount) => {\r\n    return dueAmount > 0 ? \"hasDept\" : \"\"\r\n}\r\n\r\nexport const findPatientsForm = async (name, setPatientsList, setServerError) => {//method to get the patients list based on the person name if there is any error it is stored in the --> serverError\r\n    console.log(name)\r\n    try {\r\n        const res = await api.get(patientURLS.findPatients + name)\r\n        setPatientsList(res.data)\r\n    } catch (e) {\r\n        if (e.response)\r\n            setServerError(e.response.data)\r\n        setPatientsList([])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}