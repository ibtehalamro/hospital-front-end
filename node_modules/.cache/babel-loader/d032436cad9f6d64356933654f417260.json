{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Clinics Components\\\\ClinicForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\nimport { getAllClinics, getClinic, postClinic } from \"./Clinics Functions/ClinicsFunctions\";\nimport TextInputCustom from \"../../Re-usable/FormComponents/TextInputCustom\";\nimport { messages, registerObject } from \"../../../Common Functions/FormObjects\";\nimport api from \"../../Re-usable/Api Url/apiURL\";\nimport { webApiURL as webApiUrl } from \"../../../Constants/URLConstants\";\n\nfunction ClinicForm(props) {\n  _s();\n\n  const history = useHistory();\n  const {\n    handleSubmit,\n    errors,\n    reset,\n    register\n  } = useForm();\n  const [clinic, setClinic] = useState();\n  const [loading, setLoading] = useState(true);\n  const clinicId = props.match !== undefined ? props.match.params.id : null;\n\n  const getClinic = async (clinicId, setClinic) => {\n    try {\n      const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\n      setClinic(res.data);\n      console.log(\"clinic\", res.data);\n    } catch (e) {}\n  };\n\n  useLayoutEffect(() => {\n    if (clinicId !== null) {\n      //if the id is found in the url\n      setLoading(false);\n      getClinic(clinicId, setClinic).then(() => {\n        reset({\n          clinicName: clinic.clinicName\n        });\n        setLoading(true);\n      });\n    } else setLoading(true);\n  }, [loading]);\n\n  function onSubmit(data, e) {\n    if (props.match !== undefined) data = { ...data,\n      id: props.match.params.id\n    };\n    postClinic(data).then(() => {\n      e.target.reset();\n      getAllClinics();\n    });\n  }\n\n  console.log(\"Clinic\", clinic);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" clinic-form-container\",\n    children: [clinic === undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading user info . . . .\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 37\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"edit clinic \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"previous name : \", clinic.clinicName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mainTitle\",\n        children: \"Add Clinic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-weight-bold\",\n        children: \"Choose a unique clinic name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        className: \"w-75\",\n        children: [/*#__PURE__*/_jsxDEV(TextInputCustom, {\n          field: \"clinicName\",\n          label: \"Clinic Name\",\n          errorMessages: messages,\n          form: {\n            register,\n            errors,\n            registerObject\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ClinicForm, \"BHU2Z1xrtPF/OG0BK6bbUxImYVY=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = ClinicForm;\nexport default ClinicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClinicForm\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Clinics Components/ClinicForm.js"],"names":["React","useLayoutEffect","useState","useForm","useHistory","getAllClinics","getClinic","postClinic","TextInputCustom","messages","registerObject","api","webApiURL","webApiUrl","ClinicForm","props","history","handleSubmit","errors","reset","register","clinic","setClinic","loading","setLoading","clinicId","match","undefined","params","id","res","get","clinics","data","console","log","e","then","clinicName","onSubmit","target"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect, useState} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useHistory} from \"react-router\";\r\nimport {getAllClinics, getClinic, postClinic} from \"./Clinics Functions/ClinicsFunctions\";\r\nimport TextInputCustom from \"../../Re-usable/FormComponents/TextInputCustom\";\r\nimport {messages, registerObject} from \"../../../Common Functions/FormObjects\";\r\nimport api from \"../../Re-usable/Api Url/apiURL\";\r\nimport {webApiURL as webApiUrl} from \"../../../Constants/URLConstants\";\r\n\r\nfunction ClinicForm(props) {\r\n    const history = useHistory();\r\n    const {handleSubmit, errors, reset, register} = useForm();\r\n\r\n\r\n    const [clinic, setClinic] = useState();\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const clinicId = props.match !== undefined ? props.match.params.id : null\r\n\r\n    const getClinic = async (clinicId, setClinic) => {\r\n        try {\r\n            const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\r\n            setClinic(res.data)\r\n            console.log(\"clinic\", res.data)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        if (clinicId !== null) {//if the id is found in the url\r\n            setLoading(false)\r\n\r\n            getClinic(clinicId, setClinic).then(() => {\r\n                reset({clinicName:clinic.clinicName})\r\n                setLoading(true)\r\n            })\r\n        } else\r\n            setLoading(true)\r\n\r\n\r\n    }, [  loading  ])\r\n\r\n\r\n    function onSubmit(data, e) {\r\n        if (props.match !== undefined)\r\n            data = {...data, id: props.match.params.id}\r\n\r\n        postClinic(data).then(() => {\r\n            e.target.reset();\r\n            getAllClinics();\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\nconsole.log(\"Clinic\",clinic)\r\n    return (\r\n        <div className=\" clinic-form-container\">\r\n            {clinic === undefined ? <div>Loading user info . . . .</div>\r\n                :\r\n                <div>\r\n                    <h4>edit clinic </h4>\r\n                    <h5>previous name : {clinic.clinicName}</h5>\r\n                </div>}\r\n\r\n            {\r\n                loading &&\r\n                <>\r\n                    <h1 className=\"mainTitle\">Add Clinic</h1>\r\n                    <p className=\"font-weight-bold\">Choose a unique clinic name</p>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"w-75\">\r\n                        <TextInputCustom field=\"clinicName\" label=\"Clinic Name\" errorMessages={messages}\r\n                                         form={{register, errors, registerObject}}/>\r\n                        <input type=\"submit\"/>\r\n                    </form>\r\n                </>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ClinicForm;"]},"metadata":{},"sourceType":"module"}