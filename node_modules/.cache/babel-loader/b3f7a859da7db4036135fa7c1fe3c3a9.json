{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majdee\\\\OneDrive\\\\prpogramming projects\\\\Hospital project with sass\\\\front\\\\ui\\\\src\\\\Components\\\\Main Content\\\\Clinics Components\\\\ClinicForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { postClinic } from \"./Clinics Functions/ClinicsFunctions\";\nimport TextInputCustom from \"../../Re-usable/FormComponents/TextInputCustom\";\nimport { messages, registerObject } from \"../../../Common Functions/FormObjects\";\nimport api from \"../../Re-usable/Api Url/apiURL\";\nimport { webApiURL as webApiUrl } from \"../../../Constants/URLConstants\";\n\nfunction ClinicForm({\n  setUpdate,\n  clinic\n}) {\n  _s();\n\n  const {\n    handleSubmit,\n    errors,\n    reset,\n    register\n  } = useForm(clinic !== undefined ? {\n    defaultValues: {\n      clinicName: clinic.clinicName\n    }\n  } : {});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    console.log(\"--clinic form update\");\n  });\n\n  const getClinic = async (clinicId, setClinic) => {\n    try {\n      const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\n      setClinic(res.data);\n      reset({\n        clinicName: clinic.clinicName\n      }); // console.log(\"clinic response \", res.data)\n    } catch (e) {}\n  };\n\n  useLayoutEffect(() => {\n    const fetchData = async () => {\n      if (clinicId !== null) {\n        //if the id is found in the url\n        setLoading(false);\n        await getClinic(clinicId, setClinic); // console.log(\"clinic from fetch\",clinic)\n\n        setLoading(true);\n      } else setLoading(true);\n    };\n\n    fetchData();\n  }, []);\n\n  function onSubmit(data, e) {\n    data.clinicName = data.clinicName.trim();\n    console.log(\"data0\", data.clinicName);\n    if (props.match !== undefined) data = { ...data,\n      id: props.match.params.id\n    };\n    postClinic(data).then(() => {\n      e.target.reset();\n      props.setUpdate();\n    });\n  } // console.log(\"Clinic\",clinic)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" clinic-form-container\",\n    children: [clinic === undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading user info . . . .\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 37\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"edit clinic \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"previous name : \", clinic.clinicName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mainTitle\",\n        children: \"Add Clinic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-weight-bold\",\n        children: \"Choose a unique clinic name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(TextInputCustom, {\n          field: \"clinicName\",\n          label: \"Clinic Name\",\n          errorMessages: messages,\n          form: {\n            register,\n            errors,\n            registerObject\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ClinicForm, \"bD9uEM4Dyf/M6YAWUUcWvcZkCCg=\", false, function () {\n  return [useForm];\n});\n\n_c = ClinicForm;\nexport default ClinicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClinicForm\");","map":{"version":3,"sources":["C:/Users/majdee/OneDrive/prpogramming projects/Hospital project with sass/front/ui/src/Components/Main Content/Clinics Components/ClinicForm.js"],"names":["React","useEffect","useLayoutEffect","useState","useForm","postClinic","TextInputCustom","messages","registerObject","api","webApiURL","webApiUrl","ClinicForm","setUpdate","clinic","handleSubmit","errors","reset","register","undefined","defaultValues","clinicName","loading","setLoading","console","log","getClinic","clinicId","setClinic","res","get","clinics","data","e","fetchData","onSubmit","trim","props","match","id","params","then","target"],"mappings":"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","sourcesContent":["import React, {useEffect, useLayoutEffect, useState} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\n import {postClinic} from \"./Clinics Functions/ClinicsFunctions\";\r\nimport TextInputCustom from \"../../Re-usable/FormComponents/TextInputCustom\";\r\nimport {messages, registerObject} from \"../../../Common Functions/FormObjects\";\r\nimport api from \"../../Re-usable/Api Url/apiURL\";\r\nimport {webApiURL as webApiUrl} from \"../../../Constants/URLConstants\";\r\n\r\nfunction ClinicForm({setUpdate, clinic}) {\r\n    const {handleSubmit, errors, reset, register} = useForm(clinic!==undefined?{ defaultValues:{clinicName:clinic.clinicName}}:{});\r\n     const [loading, setLoading] = useState(true);\r\n\r\n\r\n    useEffect(()=>{\r\n        console.log(\"--clinic form update\")\r\n    })\r\n\r\n\r\n    const getClinic = async (clinicId, setClinic) => {\r\n        try {\r\n            const res = await api.get(webApiUrl.clinics.getClinic + clinicId);\r\n            setClinic(res.data)\r\n            reset({clinicName:clinic.clinicName})\r\n\r\n            // console.log(\"clinic response \", res.data)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    useLayoutEffect( () => {\r\nconst fetchData=async () => {\r\n    if (clinicId !== null) {//if the id is found in the url\r\n        setLoading(false)\r\n\r\n        await  getClinic(clinicId, setClinic)\r\n        // console.log(\"clinic from fetch\",clinic)\r\n        setLoading(true)\r\n    } else\r\n        setLoading(true)\r\n\r\n}\r\n fetchData()\r\n\r\n    }, [    ])\r\n\r\n\r\n    function onSubmit(data, e) {\r\n        data.clinicName=data.clinicName.trim();\r\n        console.log(\"data0\", data.clinicName)\r\n        if (props.match !== undefined)\r\n            data = {...data, id: props.match.params.id}\r\n\r\n        postClinic(data).then(() => {\r\n            e.target.reset();\r\n             props.setUpdate()\r\n        });\r\n    }\r\n\r\n\r\n// console.log(\"Clinic\",clinic)\r\n    return (\r\n        <div className=\" clinic-form-container\">\r\n            {clinic === undefined ? <div>Loading user info . . . .</div>\r\n                :\r\n                <div>\r\n                    <h4>edit clinic </h4>\r\n                    <h5>previous name : {clinic.clinicName}</h5>\r\n                </div>}\r\n\r\n            {\r\n                loading &&\r\n                <>\r\n                    <h1 className=\"mainTitle\">Add Clinic</h1>\r\n                    <p className=\"font-weight-bold\">Choose a unique clinic name</p>\r\n                    <form onSubmit={handleSubmit(onSubmit)} >\r\n                        <TextInputCustom field=\"clinicName\" label=\"Clinic Name\" errorMessages={messages}\r\n                                         form={{register, errors, registerObject}}/>\r\n                        <input type=\"submit\"/>\r\n                    </form>\r\n                </>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ClinicForm;"]},"metadata":{},"sourceType":"module"}